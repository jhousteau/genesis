/**
 * Tests for {{project_name}} application
 */

import request from 'supertest';
import { app } from '../src/app';

describe('{{project_name}} API', () => {
  describe('GET /', () => {
    it('should return welcome message', async () => {
      const response = await request(app)
        .get('/')
        .expect(200);

      expect(response.body).toMatchObject({
        message: 'Welcome to {{project_name}}!',
        version: '0.1.0'
      });
      expect(response.body.timestamp).toBeDefined();
    });
  });

  describe('GET /health', () => {
    it('should return health status', async () => {
      const response = await request(app)
        .get('/health')
        .expect(200);

      expect(response.body).toMatchObject({
        status: 'healthy',
        service: '{{project_name}}',
        version: '0.1.0'
      });
      expect(response.body.uptime).toBeDefined();
      expect(response.body.timestamp).toBeDefined();
    });
  });

  describe('GET /health/detailed', () => {
    it('should return detailed health status', async () => {
      const response = await request(app)
        .get('/health/detailed')
        .expect(200);

      expect(response.body).toMatchObject({
        status: 'healthy',
        service: '{{project_name}}',
        version: '0.1.0'
      });
      expect(response.body.checks).toBeDefined();
    });
  });

  describe('GET /health/ready', () => {
    it('should return readiness status', async () => {
      const response = await request(app)
        .get('/health/ready')
        .expect(200);

      expect(response.body).toMatchObject({
        status: 'ready',
        service: '{{project_name}}'
      });
    });
  });

  describe('GET /health/live', () => {
    it('should return liveness status', async () => {
      const response = await request(app)
        .get('/health/live')
        .expect(200);

      expect(response.body).toMatchObject({
        status: 'alive',
        service: '{{project_name}}'
      });
    });
  });

  describe('GET /nonexistent', () => {
    it('should return 404 for unknown routes', async () => {
      const response = await request(app)
        .get('/nonexistent')
        .expect(404);

      expect(response.body).toMatchObject({
        error: 'Not Found',
        message: 'Route /nonexistent not found'
      });
    });
  });

  describe('Error handling', () => {
    it('should handle server errors gracefully', async () => {
      // Create a route that throws an error for testing
      app.get('/test-error', () => {
        throw new Error('Test error');
      });

      const response = await request(app)
        .get('/test-error')
        .expect(500);

      expect(response.body).toMatchObject({
        error: 'Internal Server Error'
      });
    });
  });
});
