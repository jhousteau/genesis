[tool.poetry]
name = "{{PROJECT_NAME}}-typescript"
version = "1.0.0"
description = "Genesis TypeScript Service Build Integration - {{PROJECT_DESCRIPTION}}"
authors = ["Genesis Platform Team"]
license = "MIT"
readme = "README.md"
packages = [
    { include = "build_tools", from = "." },
]

[tool.poetry.dependencies]
python = "^3.11"
# Build and deployment tools
pyyaml = "^6.0"
jinja2 = "^3.1.0"
click = "^8.1.0"
requests = "^2.31.0"
# GCP integration for deployments
google-cloud-build = "^3.17.0"
google-cloud-run = "^0.10.0"
google-cloud-functions = "^1.13.0"
google-cloud-storage = "^2.10.0"
google-cloud-secret-manager = "^2.16.0"
google-cloud-logging = "^3.5.0"
# Container and orchestration
docker = "^6.1.0"
kubernetes = "^27.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.7.0"
isort = "^5.12.0"
mypy = "^1.5.0"
flake8 = "^6.0.0"

[tool.poetry.scripts]
genesis-ts-build = "build_tools.cli:main"
genesis-ts-deploy = "build_tools.deploy:main"
genesis-ts-test = "build_tools.test:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["build_tools"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["build_tools"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
