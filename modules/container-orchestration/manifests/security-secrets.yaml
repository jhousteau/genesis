# Genesis Container Security and Secret Management
# Comprehensive security policies, RBAC, and secret injection for containerized agents
---
# Security Policy for Network Traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: genesis-default-deny-all
  namespace: genesis-agents
  labels:
    app: security-policy
    component: network-security
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# Allow ingress from monitoring namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-monitoring-ingress
  namespace: genesis-agents
  labels:
    app: security-policy
    component: monitoring-access
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Metrics
    - protocol: TCP
      port: 8080  # Health checks
---
# Allow agent-to-agent communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-agent-communication
  namespace: genesis-agents
  labels:
    app: security-policy
    component: agent-communication
spec:
  podSelector:
    matchLabels:
      tier: agent-runtime
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          tier: agent-runtime
    - namespaceSelector:
        matchLabels:
          name: claude-talk
  egress:
  - to:
    - podSelector:
        matchLabels:
          tier: agent-runtime
    - namespaceSelector:
        matchLabels:
          name: claude-talk
  - to: {}  # Allow external access for GCP APIs
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
---
# Pod Security Policy for Agent Runtime
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: genesis-agent-psp
  labels:
    app: security-policy
    component: pod-security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
  - ALL
  volumes:
  - configMap
  - emptyDir
  - projected
  - secret
  - downwardAPI
  - persistentVolumeClaim
  - hostPath
  allowedHostPaths:
  - pathPrefix: /var/run/docker.sock
    readOnly: true
  - pathPrefix: /home/agent/.config/gcloud
    readOnly: true
  runAsUser:
    rule: MustRunAsNonRoot
  runAsGroup:
    rule: MustRunAs
    ranges:
    - min: 1001
      max: 65535
  seLinux:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  readOnlyRootFilesystem: true
---
# RBAC ClusterRole for Agent Operations
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: genesis-agent-operator
  labels:
    app: rbac
    component: cluster-role
rules:
# Pod and deployment management
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/exec"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Service and networking
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
# ConfigMaps and Secrets (limited)
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
# Metrics and monitoring
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
# RBAC Role for Agent-Cage Management
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: agent-cage-manager
  namespace: genesis-agents
  labels:
    app: rbac
    component: role
rules:
# Full control over agent-cage deployments
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/exec", "services", "configmaps"]
  verbs: ["*"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets"]
  verbs: ["*"]
# HPA management
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
# PVC management
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
---
# Service Account for Agent-Cage
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agent-cage-operator
  namespace: genesis-agents
  labels:
    app: rbac
    component: service-account
  annotations:
    iam.gke.io/gcp-service-account: agent-cage@${PROJECT_ID}.iam.gserviceaccount.com
automountServiceAccountToken: true
---
# Bind Agent-Cage Service Account to Roles
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: agent-cage-operator-binding
  namespace: genesis-agents
  labels:
    app: rbac
    component: role-binding
subjects:
- kind: ServiceAccount
  name: agent-cage-operator
  namespace: genesis-agents
roleRef:
  kind: Role
  name: agent-cage-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: agent-cage-cluster-operator-binding
  labels:
    app: rbac
    component: cluster-role-binding
subjects:
- kind: ServiceAccount
  name: agent-cage-operator
  namespace: genesis-agents
roleRef:
  kind: ClusterRole
  name: genesis-agent-operator
  apiGroup: rbac.authorization.k8s.io
---
# Secret Manager Integration
apiVersion: v1
kind: Secret
metadata:
  name: genesis-secrets-config
  namespace: genesis-agents
  labels:
    app: secret-management
    component: config
type: Opaque
data:
  # Base64 encoded secret references
  secret-project-id: ${SECRET_PROJECT_ID_B64}
  secret-version: bGF0ZXN0  # "latest" in base64
---
# External Secrets Operator Configuration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: gcpsm-secret-store
  namespace: genesis-agents
  labels:
    app: secret-management
    component: secret-store
spec:
  provider:
    gcpsm:
      projectId: ${PROJECT_ID}
      auth:
        workloadIdentity:
          clusterLocation: ${CLUSTER_LOCATION}
          clusterName: ${CLUSTER_NAME}
          serviceAccountRef:
            name: external-secrets-sa
---
# External Secret for Claude API Key
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: claude-api-key-secret
  namespace: genesis-agents
  labels:
    app: secret-management
    component: external-secret
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: gcpsm-secret-store
    kind: SecretStore
  target:
    name: claude-api-key
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        api-key: "{{ .claudeApiKey }}"
  data:
  - secretKey: claudeApiKey
    remoteRef:
      key: claude-api-key
      version: latest
---
# External Secret for GCP Service Account Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: gcp-sa-keys-secret
  namespace: genesis-agents
  labels:
    app: secret-management
    component: external-secret
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: gcpsm-secret-store
    kind: SecretStore
  target:
    name: gcp-service-account-keys
    creationPolicy: Owner
    template:
      type: kubernetes.io/service-account-token
      data:
        token: "{{ .serviceAccountToken }}"
        ca.crt: "{{ .caCrt }}"
  data:
  - secretKey: serviceAccountToken
    remoteRef:
      key: gcp-service-account-token
      version: latest
  - secretKey: caCrt
    remoteRef:
      key: kubernetes-ca-certificate
      version: latest
---
# External Secret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials-secret
  namespace: genesis-agents
  labels:
    app: secret-management
    component: external-secret
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: gcpsm-secret-store
    kind: SecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .dbUsername }}"
        password: "{{ .dbPassword }}"
        host: "{{ .dbHost }}"
        database: "{{ .dbName }}"
        connection-string: "postgresql://{{ .dbUsername }}:{{ .dbPassword }}@{{ .dbHost }}:5432/{{ .dbName }}"
  data:
  - secretKey: dbUsername
    remoteRef:
      key: postgres-username
      version: latest
  - secretKey: dbPassword
    remoteRef:
      key: postgres-password
      version: latest
  - secretKey: dbHost
    remoteRef:
      key: postgres-host
      version: latest
  - secretKey: dbName
    remoteRef:
      key: postgres-database
      version: latest
---
# Service Account for External Secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: genesis-agents
  labels:
    app: secret-management
    component: service-account
  annotations:
    iam.gke.io/gcp-service-account: external-secrets@${PROJECT_ID}.iam.gserviceaccount.com
---
# Security Context Constraints for OpenShift (if applicable)
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: genesis-agent-scc
  labels:
    app: security-policy
    component: openshift-scc
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: false
allowPrivilegedContainer: false
allowedCapabilities: null
defaultAddCapabilities: null
fsGroup:
  type: MustRunAs
  ranges:
  - min: 1001
    max: 65535
readOnlyRootFilesystem: true
requiredDropCapabilities:
- ALL
runAsUser:
  type: MustRunAsNonRoot
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: MustRunAs
  ranges:
  - min: 1001
    max: 65535
users: []
groups: []
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
---
# Pod Security Standards (Pod Security Admission)
apiVersion: v1
kind: Namespace
metadata:
  name: genesis-agents-secure
  labels:
    name: genesis-agents-secure
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    genesis.platform/environment: ${ENVIRONMENT}
    genesis.platform/security-level: high
---
# OPA Gatekeeper Constraint Template
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: genesisrequiredsecuritycontext
  labels:
    app: security-policy
    component: gatekeeper
spec:
  crd:
    spec:
      names:
        kind: GenesisRequiredSecurityContext
      validation:
        type: object
        properties:
          requiredRunAsNonRoot:
            type: boolean
          requiredReadOnlyRootFilesystem:
            type: boolean
          forbiddenCapabilities:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package genesisrequiredsecuritycontext

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          msg := "Container must run as non-root user"
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem
          msg := "Container must have read-only root filesystem"
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          capability := container.securityContext.capabilities.add[_]
          capability in input.parameters.forbiddenCapabilities
          msg := sprintf("Forbidden capability: %v", [capability])
        }
---
# Gatekeeper Constraint
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: GenesisRequiredSecurityContext
metadata:
  name: genesis-security-requirements
  labels:
    app: security-policy
    component: constraint
spec:
  match:
    kinds:
    - apiGroups: [""]
      kinds: ["Pod"]
    namespaces: ["genesis-agents", "claude-talk"]
  parameters:
    requiredRunAsNonRoot: true
    requiredReadOnlyRootFilesystem: true
    forbiddenCapabilities: ["NET_ADMIN", "SYS_ADMIN", "SYS_TIME", "SYS_MODULE"]
---
# Admission Controller Webhook Configuration
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: genesis-security-webhook
  labels:
    app: security-policy
    component: admission-webhook
webhooks:
- name: genesis.security.validation
  clientConfig:
    service:
      name: genesis-security-webhook-service
      namespace: genesis-system
      path: "/validate"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail
  namespaceSelector:
    matchLabels:
      genesis.platform/security-scanning: "enabled"
---
# Image Security Policy
apiVersion: v1
kind: ConfigMap
metadata:
  name: image-security-policy
  namespace: genesis-agents
  labels:
    app: security-policy
    component: image-policy
data:
  policy.yaml: |
    imagePolicy:
      allowedRegistries:
      - us-central1-docker.pkg.dev/${PROJECT_ID}/
      - gcr.io/gke-release/
      - k8s.gcr.io/
      - registry.k8s.io/
      - docker.io/library/
      
      blockedImages:
      - "*:latest"  # Require specific versions
      
      requiredAnnotations:
      - "org.opencontainers.image.source"
      - "genesis.platform/service"
      
      securityScanResults:
        maxCriticalVulnerabilities: 0
        maxHighVulnerabilities: 5
        requiredScanDate: "7d"  # Within 7 days
      
      signatureVerification:
        required: true
        cosignPublicKey: |
          -----BEGIN PUBLIC KEY-----
          # Cosign public key for image signature verification
          -----END PUBLIC KEY-----
---
# Secret Rotation Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-rotation-config
  namespace: genesis-agents
  labels:
    app: secret-management
    component: rotation-config
data:
  rotation-policy.yaml: |
    rotationPolicy:
      secrets:
        claude-api-key:
          rotationInterval: "90d"
          preRotationHook: "/scripts/pre-rotation-hook.sh"
          postRotationHook: "/scripts/post-rotation-hook.sh"
          
        database-credentials:
          rotationInterval: "30d"
          gracePeriod: "24h"  # Keep old credentials for 24h
          
        gcp-service-account-keys:
          rotationInterval: "90d"
          autoRotate: true
          
      rotationSchedule:
        - cron: "0 2 * * 0"  # Sunday at 2 AM
          secrets: ["claude-api-key", "database-credentials"]
        - cron: "0 3 15 * *"  # 15th of month at 3 AM
          secrets: ["gcp-service-account-keys"]
---
# Sealed Secrets Configuration (Alternative to External Secrets)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: genesis-sealed-secrets
  namespace: genesis-agents
  labels:
    app: secret-management
    component: sealed-secret
spec:
  template:
    metadata:
      name: genesis-sealed-secrets
    type: Opaque
  encryptedData:
    # These would be encrypted with the sealed-secrets public key
    api-key: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx...
    database-password: AgBKgOvN7zWH6dqq0Y8DJnVhQ2R1VpFZXE...
---
# Falco Rules for Runtime Security
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-genesis-rules
  namespace: falco-system
  labels:
    app: security-policy
    component: runtime-security
data:
  genesis_rules.yaml: |
    - rule: Unauthorized Process in Genesis Container
      desc: Detect processes not in allowed list for Genesis containers
      condition: >
        spawned_process and
        k8s_ns in (genesis-agents, claude-talk) and
        not proc.name in (python3, node, kubectl, gcloud, terraform)
      output: >
        Unauthorized process in Genesis container 
        (user=%user.name command=%proc.cmdline container=%container.id)
      priority: WARNING
      tags: [genesis, process]

    - rule: Genesis Secret Access
      desc: Monitor access to Genesis secrets
      condition: >
        open_read and
        k8s_ns in (genesis-agents, claude-talk) and
        fd.name startswith /var/run/secrets/kubernetes.io/
      output: >
        Genesis container accessing secrets
        (user=%user.name file=%fd.name container=%container.id)
      priority: INFO
      tags: [genesis, secrets]

    - rule: Network Connection from Genesis Container
      desc: Monitor external network connections
      condition: >
        outbound and
        k8s_ns in (genesis-agents, claude-talk) and
        not fd.net.dip in (169.254.169.254, cluster-ip-ranges)
      output: >
        External network connection from Genesis container
        (user=%user.name connection=%fd.name container=%container.id)
      priority: INFO
      tags: [genesis, network]
---
# Security Scanning Job
apiVersion: batch/v1
kind: CronJob
metadata:
  name: genesis-security-scan
  namespace: genesis-agents
  labels:
    app: security-scanning
    component: cron-job
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: security-scanner-sa
          restartPolicy: OnFailure
          containers:
          - name: security-scanner
            image: aquasec/trivy:latest
            imagePullPolicy: Always
            command:
            - /bin/sh
            - -c
            - |
              # Scan all Genesis images
              kubectl get pods -n genesis-agents -o jsonpath='{.items[*].spec.containers[*].image}' | tr ' ' '\n' | sort -u | while read image; do
                echo "Scanning image: $image"
                trivy image --exit-code 1 --severity HIGH,CRITICAL "$image"
              done
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
---
# Service Account for Security Scanner
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-scanner-sa
  namespace: genesis-agents
  labels:
    app: security-scanning
    component: service-account
---
# RBAC for Security Scanner
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: security-scanner-role
  namespace: genesis-agents
  labels:
    app: security-scanning
    component: rbac
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: security-scanner-binding
  namespace: genesis-agents
  labels:
    app: security-scanning
    component: rbac
subjects:
- kind: ServiceAccount
  name: security-scanner-sa
  namespace: genesis-agents
roleRef:
  kind: Role
  name: security-scanner-role
  apiGroup: rbac.authorization.k8s.io