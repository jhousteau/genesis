# Docker Compose Template for Genesis Agent-Cage and Claude-Talk
# Multi-service container orchestration for local development and testing

version: '3.8'

services:
  # Agent-Cage Runtime
  agent-cage:
    image: ${CONTAINER_REGISTRY}/genesis-agent-cage:${AGENT_CAGE_VERSION:-latest}
    container_name: genesis-agent-cage
    restart: unless-stopped

    environment:
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - PROJECT_ID=${PROJECT_ID}
      - AGENT_TYPE=${AGENT_TYPE:-backend-developer}
      - WORKSPACE_DIR=/workspace
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - METRICS_PORT=9090
      - HEALTH_PORT=8080
      - AGENT_POOL_SIZE=${AGENT_POOL_SIZE:-1}

    ports:
      - "8080:8080"  # Health endpoint
      - "9090:9090"  # Metrics endpoint
      - "3000:3000"  # Agent API

    volumes:
      - agent-workspace:/workspace
      - agent-logs:/var/log/agent-cage
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${HOST_HOME}/.config/gcloud:/home/agent/.config/gcloud:ro

    networks:
      - genesis-network

    labels:
      - "genesis.platform/service=agent-cage"
      - "genesis.platform/environment=${ENVIRONMENT:-dev}"
      - "genesis.platform/agent-type=${AGENT_TYPE:-backend-developer}"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    depends_on:
      - redis
      - postgres

  # Claude-Talk MCP Server
  claude-talk:
    image: ${CONTAINER_REGISTRY}/genesis-claude-talk:${CLAUDE_TALK_VERSION:-latest}
    container_name: genesis-claude-talk
    restart: unless-stopped

    environment:
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - PROJECT_ID=${PROJECT_ID}
      - MCP_SERVER_PORT=4000
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CONTAINER_ISOLATION_ENABLED=true
      - MAX_CONCURRENT_SESSIONS=${MAX_CONCURRENT_SESSIONS:-10}

    ports:
      - "4000:4000"  # MCP Server
      - "4001:4001"  # Admin interface

    volumes:
      - claude-sessions:/sessions
      - claude-logs:/var/log/claude-talk
      - /var/run/docker.sock:/var/run/docker.sock

    networks:
      - genesis-network

    labels:
      - "genesis.platform/service=claude-talk"
      - "genesis.platform/environment=${ENVIRONMENT:-dev}"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    depends_on:
      - redis

  # Backend Developer Agent
  backend-developer-agent:
    image: ${CONTAINER_REGISTRY}/genesis-backend-developer:${AGENT_VERSION:-latest}
    container_name: genesis-backend-developer
    restart: unless-stopped

    environment:
      - AGENT_TYPE=backend-developer
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - PROJECT_ID=${PROJECT_ID}
      - WORKSPACE_DIR=/workspace
      - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
      - NODE_VERSION=${NODE_VERSION:-18}
      - GO_VERSION=${GO_VERSION:-1.21}

    ports:
      - "8081:8080"  # Agent HTTP API
      - "9091:9090"  # Metrics

    volumes:
      - backend-workspace:/workspace
      - backend-cache:/home/agent/.cache
      - ${HOST_HOME}/.ssh:/home/agent/.ssh:ro
      - ${HOST_HOME}/.config/gcloud:/home/agent/.config/gcloud:ro

    networks:
      - genesis-network

    labels:
      - "genesis.platform/service=backend-developer-agent"
      - "genesis.platform/agent-type=backend-developer"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

    depends_on:
      - agent-cage

  # Frontend Developer Agent
  frontend-developer-agent:
    image: ${CONTAINER_REGISTRY}/genesis-frontend-developer:${AGENT_VERSION:-latest}
    container_name: genesis-frontend-developer
    restart: unless-stopped

    environment:
      - AGENT_TYPE=frontend-developer
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - PROJECT_ID=${PROJECT_ID}
      - WORKSPACE_DIR=/workspace
      - NODE_VERSION=${NODE_VERSION:-18}
      - REACT_VERSION=${REACT_VERSION:-18}
      - VUE_VERSION=${VUE_VERSION:-3}

    ports:
      - "8082:8080"  # Agent HTTP API
      - "9092:9090"  # Metrics
      - "3001:3000"  # Development server

    volumes:
      - frontend-workspace:/workspace
      - frontend-cache:/home/agent/.cache
      - ${HOST_HOME}/.ssh:/home/agent/.ssh:ro
      - ${HOST_HOME}/.config/gcloud:/home/agent/.config/gcloud:ro

    networks:
      - genesis-network

    labels:
      - "genesis.platform/service=frontend-developer-agent"
      - "genesis.platform/agent-type=frontend-developer"

    depends_on:
      - agent-cage

  # Platform Engineer Agent
  platform-engineer-agent:
    image: ${CONTAINER_REGISTRY}/genesis-platform-engineer:${AGENT_VERSION:-latest}
    container_name: genesis-platform-engineer
    restart: unless-stopped

    environment:
      - AGENT_TYPE=platform-engineer
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - PROJECT_ID=${PROJECT_ID}
      - WORKSPACE_DIR=/workspace
      - TERRAFORM_VERSION=${TERRAFORM_VERSION:-1.6}
      - KUBECTL_VERSION=${KUBECTL_VERSION:-1.28}

    ports:
      - "8083:8080"  # Agent HTTP API
      - "9093:9090"  # Metrics

    volumes:
      - platform-workspace:/workspace
      - platform-cache:/home/agent/.cache
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${HOST_HOME}/.ssh:/home/agent/.ssh:ro
      - ${HOST_HOME}/.config/gcloud:/home/agent/.config/gcloud:ro
      - ${HOST_HOME}/.kube:/home/agent/.kube:ro

    networks:
      - genesis-network

    labels:
      - "genesis.platform/service=platform-engineer-agent"
      - "genesis.platform/agent-type=platform-engineer"

    depends_on:
      - agent-cage

  # Redis for Session Storage
  redis:
    image: redis:7-alpine
    container_name: genesis-redis
    restart: unless-stopped

    ports:
      - "6379:6379"

    volumes:
      - redis-data:/data

    networks:
      - genesis-network

    labels:
      - "genesis.platform/service=redis"
      - "genesis.platform/component=infrastructure"

    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # PostgreSQL for Agent Metadata
  postgres:
    image: postgres:15-alpine
    container_name: genesis-postgres
    restart: unless-stopped

    environment:
      - POSTGRES_DB=${POSTGRES_DB:-genesis}
      - POSTGRES_USER=${POSTGRES_USER:-genesis}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-genesis-dev-password}
      - PGDATA=/var/lib/postgresql/data/pgdata

    ports:
      - "5432:5432"

    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro

    networks:
      - genesis-network

    labels:
      - "genesis.platform/service=postgres"
      - "genesis.platform/component=infrastructure"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-genesis} -d ${POSTGRES_DB:-genesis}"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: genesis-prometheus
    restart: unless-stopped

    ports:
      - "9090:9090"

    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro

    networks:
      - genesis-network

    labels:
      - "genesis.platform/service=prometheus"
      - "genesis.platform/component=monitoring"

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: genesis-grafana
    restart: unless-stopped

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource

    ports:
      - "3001:3000"

    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro

    networks:
      - genesis-network

    labels:
      - "genesis.platform/service=grafana"
      - "genesis.platform/component=monitoring"

    depends_on:
      - prometheus

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: genesis-nginx
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx

    networks:
      - genesis-network

    labels:
      - "genesis.platform/service=nginx"
      - "genesis.platform/component=load-balancer"

    depends_on:
      - agent-cage
      - claude-talk

networks:
  genesis-network:
    driver: bridge
    labels:
      - "genesis.platform/network=main"
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Agent workspaces
  agent-workspace:
    labels:
      - "genesis.platform/volume=agent-workspace"
  backend-workspace:
    labels:
      - "genesis.platform/volume=backend-workspace"
  frontend-workspace:
    labels:
      - "genesis.platform/volume=frontend-workspace"
  platform-workspace:
    labels:
      - "genesis.platform/volume=platform-workspace"

  # Cache volumes
  backend-cache:
    labels:
      - "genesis.platform/volume=backend-cache"
  frontend-cache:
    labels:
      - "genesis.platform/volume=frontend-cache"
  platform-cache:
    labels:
      - "genesis.platform/volume=platform-cache"

  # Service data
  claude-sessions:
    labels:
      - "genesis.platform/volume=claude-sessions"
  redis-data:
    labels:
      - "genesis.platform/volume=redis-data"
  postgres-data:
    labels:
      - "genesis.platform/volume=postgres-data"

  # Monitoring data
  prometheus-data:
    labels:
      - "genesis.platform/volume=prometheus-data"
  grafana-data:
    labels:
      - "genesis.platform/volume=grafana-data"

  # Logs
  agent-logs:
    labels:
      - "genesis.platform/volume=agent-logs"
  claude-logs:
    labels:
      - "genesis.platform/volume=claude-logs"
  nginx-logs:
    labels:
      - "genesis.platform/volume=nginx-logs"
