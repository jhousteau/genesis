# Project Environment Configuration
# Generated by setup-project
# This file is loaded by direnv - https://direnv.net/

# Project identification
export PROJECT_NAME="${PROJECT_NAME}"
export PROJECT_TYPE="${PROJECT_TYPE}"

# GCP Configuration - Isolated per project
export CLOUDSDK_CONFIG="$HOME/.gcloud/${PROJECT_NAME}"
export GCLOUD_PROJECT_DEV="${PROJECT_NAME}-dev"
export GCLOUD_PROJECT_TEST="${PROJECT_NAME}-test"
export GCLOUD_PROJECT_STAGE="${PROJECT_NAME}-stage"
export GCLOUD_PROJECT_PROD="${PROJECT_NAME}-prod"

# Set default environment
export ENV="dev"
export GCP_PROJECT="$GCLOUD_PROJECT_DEV"

# Default region
export REGION="us-central1"
export ZONE="us-central1-a"

# Development settings
export DEBUG="true"
export LOG_LEVEL="info"

# Python configuration
if [[ -f "requirements.txt" ]]; then
    # Use project-specific virtual environment
    if [[ ! -d ".venv" ]]; then
        echo "Creating Python virtual environment..."
        python3 -m venv .venv
    fi
    source .venv/bin/activate

    # Auto-install dependencies if requirements.txt is newer than installed packages
    if [[ "requirements.txt" -nt ".venv/installed" ]] || [[ ! -f ".venv/installed" ]]; then
        echo "Installing Python dependencies..."
        pip install -r requirements.txt
        touch .venv/installed
    fi
fi

# Node.js configuration
if [[ -f "package.json" ]]; then
    # Set up node modules path
    export PATH="$PWD/node_modules/.bin:$PATH"

    # Auto-install dependencies if package.json is newer
    if [[ "package.json" -nt "node_modules/.installed" ]] || [[ ! -f "node_modules/.installed" ]]; then
        echo "Installing Node.js dependencies..."
        npm install
        touch node_modules/.installed
    fi
fi

# Go configuration
if [[ -f "go.mod" ]]; then
    # Set up Go workspace
    export GO111MODULE=on
    export GOPATH="$HOME/go"
    export PATH="$GOPATH/bin:$PATH"
fi

# Rust configuration
if [[ -f "Cargo.toml" ]]; then
    # Rust environment
    export PATH="$HOME/.cargo/bin:$PATH"
fi

# Docker configuration
export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1

# Security settings
export DETECT_SECRETS_BASELINE=".secrets.baseline"

# Temporary directory for this project
export TEMP_DIR="$PWD/temp"
mkdir -p "$TEMP_DIR"

# Logging
export LOG_DIR="$TEMP_DIR/logs"
mkdir -p "$LOG_DIR"

# Development URLs (update these based on your actual services)
export DEV_API_URL="https://${GCLOUD_PROJECT_DEV}.appspot.com"
export TEST_API_URL="https://${GCLOUD_PROJECT_TEST}.appspot.com"
export STAGE_API_URL="https://${GCLOUD_PROJECT_STAGE}.appspot.com"
export PROD_API_URL="https://${GCLOUD_PROJECT_PROD}.appspot.com"

# Database URLs (if applicable)
export DEV_DB_URL="postgresql://user:pass@localhost:5432/${PROJECT_NAME}_dev"
export TEST_DB_URL="postgresql://user:pass@localhost:5432/${PROJECT_NAME}_test"

# Redis URLs (if applicable)
export DEV_REDIS_URL="redis://localhost:6379/0"
export TEST_REDIS_URL="redis://localhost:6379/1"

# API Keys and secrets (these should be in Secret Manager in production)
# export EXAMPLE_API_KEY="dev-key-here"  # Only for development!

# Custom project aliases and functions
alias gc='gcloud'
alias k='kubectl'
alias tf='terraform'

# Project-specific functions
bootstrap() {
    "$HOME/.local/bin/bootstrap" "$@"
}

deploy-dev() {
    ENV=dev make deploy
}

deploy-test() {
    ENV=test make deploy
}

deploy-stage() {
    ENV=stage make deploy
}

deploy-prod() {
    echo "⚠️  Production deployment requires confirmation"
    echo "Use: CONFIRM_PROD=I_UNDERSTAND make deploy-prod"
}

smart-commit() {
    ./scripts/smart-commit.sh
}

# GCP project switching functions
use-dev() {
    export ENV="dev"
    export GCP_PROJECT="$GCLOUD_PROJECT_DEV"
    gcloud config set project "$GCP_PROJECT" 2>/dev/null
    echo "🔄 Switched to DEV environment: $GCP_PROJECT"
}

use-test() {
    export ENV="test"
    export GCP_PROJECT="$GCLOUD_PROJECT_TEST"
    gcloud config set project "$GCP_PROJECT" 2>/dev/null
    echo "🔄 Switched to TEST environment: $GCP_PROJECT"
}

use-stage() {
    export ENV="stage"
    export GCP_PROJECT="$GCLOUD_PROJECT_STAGE"
    gcloud config set project "$GCP_PROJECT" 2>/dev/null
    echo "🔄 Switched to STAGE environment: $GCP_PROJECT"
}

use-prod() {
    export ENV="prod"
    export GCP_PROJECT="$GCLOUD_PROJECT_PROD"
    gcloud config set project "$GCP_PROJECT" 2>/dev/null
    echo "🔄 Switched to PROD environment: $GCP_PROJECT"
}

# Initialize gcloud configuration if it doesn't exist
if [[ ! -d "$CLOUDSDK_CONFIG" ]]; then
    echo "🔧 Setting up GCP isolation..."
    ./scripts/bootstrap_gcloud.sh 2>/dev/null || true
fi

# Load project-specific environment variables
if [[ -f ".env.local" ]]; then
    source .env.local
fi

# Show current environment
echo "📋 Environment: $ENV ($GCP_PROJECT)"

# Security reminder
if [[ "$ENV" == "prod" ]]; then
    echo "🚨 PRODUCTION ENVIRONMENT - Be careful!"
fi
