# Universal Makefile for all projects
# Generated by setup-project

.PHONY: help setup dev test lint build deploy clean validate

# Variables
PROJECT_NAME := ${PROJECT_NAME}
ENV ?= dev
REGION ?= us-central1

# Color output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
NC := \033[0m # No Color

help: ## Show this help message
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

setup: ## Initial project setup
	@echo "$(GREEN)Setting up project...$(NC)"
	@./scripts/bootstrap_gcloud.sh || true
	@pip install -r requirements.txt 2>/dev/null || true
	@npm install 2>/dev/null || true
	@go mod download 2>/dev/null || true
	@pre-commit install
	@direnv allow
	@echo "$(GREEN)✅ Setup complete$(NC)"

dev: ## Start local development environment
	@echo "$(GREEN)Starting development environment...$(NC)"
	@docker-compose up -d 2>/dev/null || true
	@npm run dev 2>/dev/null || python -m uvicorn main:app --reload 2>/dev/null || go run . 2>/dev/null || echo "$(YELLOW)No dev server configured$(NC)"

test: ## Run all tests
	@echo "$(GREEN)Running tests...$(NC)"
	@make test-unit
	@make test-integration
	@make test-security
	@echo "$(GREEN)✅ All tests passed$(NC)"

test-unit: ## Run unit tests
	@pytest tests/unit 2>/dev/null || npm test 2>/dev/null || go test ./... 2>/dev/null || echo "$(YELLOW)No unit tests found$(NC)"

test-integration: ## Run integration tests
	@pytest tests/integration 2>/dev/null || npm run test:integration 2>/dev/null || echo "$(YELLOW)No integration tests found$(NC)"

test-security: ## Run security tests
	@bandit -r src/ 2>/dev/null || true
	@safety check 2>/dev/null || true
	@npm audit 2>/dev/null || true

lint: ## Run linters and formatters
	@echo "$(GREEN)Running linters...$(NC)"
	@pre-commit run --all-files
	@echo "$(GREEN)✅ Linting complete$(NC)"

format: ## Format code
	@black . 2>/dev/null || true
	@prettier --write . 2>/dev/null || true
	@go fmt ./... 2>/dev/null || true

build: ## Build the project
	@echo "$(GREEN)Building project...$(NC)"
	@docker build -t $(PROJECT_NAME) . 2>/dev/null || true
	@npm run build 2>/dev/null || true
	@go build -o bin/$(PROJECT_NAME) 2>/dev/null || true
	@echo "$(GREEN)✅ Build complete$(NC)"

deploy: validate ## Deploy to environment (use ENV=prod for production)
	@echo "$(GREEN)Deploying to $(ENV)...$(NC)"
	@./scripts/deploy.sh --env=$(ENV) --region=$(REGION)
	@echo "$(GREEN)✅ Deployment complete$(NC)"

deploy-dev: ## Deploy to development
	@ENV=dev make deploy

deploy-test: ## Deploy to test
	@ENV=test make deploy

deploy-stage: ## Deploy to staging
	@ENV=stage make deploy

deploy-prod: ## Deploy to production (requires confirmation)
	@echo "$(RED)⚠️  Production deployment requires confirmation$(NC)"
	@read -p "Type 'deploy-prod' to confirm: " confirm && [ "$$confirm" = "deploy-prod" ] || (echo "$(RED)Cancelled$(NC)" && exit 1)
	@ENV=prod CONFIRM_PROD=I_UNDERSTAND make deploy

rollback: ## Rollback deployment
	@echo "$(YELLOW)Rolling back $(ENV)...$(NC)"
	@./scripts/rollback.sh --env=$(ENV)

logs: ## View application logs
	@./scripts/gcloud_guard.sh run services logs read $(PROJECT_NAME) --limit=100

validate: ## Validate project compliance
	@echo "$(GREEN)Validating project...$(NC)"
	@./scripts/validate-compliance.sh
	@echo "$(GREEN)✅ Validation complete$(NC)"

clean: ## Clean build artifacts and temp files
	@echo "$(GREEN)Cleaning project...$(NC)"
	@./scripts/cleanup.sh
	@rm -rf build dist *.egg-info node_modules __pycache__ .pytest_cache
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -delete
	@echo "$(GREEN)✅ Clean complete$(NC)"

commit: ## Make a smart commit
	@./scripts/smart-commit.sh

pr: ## Create a pull request
	@gh pr create --fill

docs: ## Generate documentation
	@echo "$(GREEN)Generating documentation...$(NC)"
	@mkdocs build 2>/dev/null || sphinx-build docs docs/_build 2>/dev/null || echo "$(YELLOW)No doc generator configured$(NC)"

monitor: ## Open monitoring dashboard
	@echo "Opening monitoring dashboard..."
	@open https://console.cloud.google.com/monitoring/dashboards

secrets: ## Manage secrets
	@./scripts/manage-secrets.sh

backup: ## Backup critical data
	@echo "$(GREEN)Creating backup...$(NC)"
	@./scripts/backup.sh

restore: ## Restore from backup
	@echo "$(YELLOW)Restoring from backup...$(NC)"
	@./scripts/restore.sh

upgrade: ## Upgrade project to latest standards
	@echo "$(GREEN)Upgrading project...$(NC)"
	@python -m setup_project upgrade

.DEFAULT_GOAL := help
