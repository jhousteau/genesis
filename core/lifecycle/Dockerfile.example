# Multi-stage Dockerfile for Genesis Service with Lifecycle Management
# Optimized for cloud-native deployment with proper signal handling,
# graceful shutdown, and comprehensive health checks.

# Build stage
FROM python:3.11-slim as builder

# Set build arguments
ARG SERVICE_VERSION=1.0.0
ARG BUILD_DATE
ARG GIT_COMMIT
ARG GENESIS_VERSION

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create application directory
WORKDIR /app

# Copy dependency files
COPY requirements.txt pyproject.toml ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Build the application (if needed)
RUN python -m pip install --no-cache-dir .

# Production stage
FROM python:3.11-slim as production

# Set metadata labels
LABEL maintainer="Genesis Team" \
      version="${SERVICE_VERSION}" \
      description="Genesis service with comprehensive lifecycle management" \
      build-date="${BUILD_DATE}" \
      git-commit="${GIT_COMMIT}" \
      genesis-version="${GENESIS_VERSION}"

# Install runtime dependencies and security updates
RUN apt-get update && apt-get install -y \
    # Required for signal handling and process management
    dumb-init \
    # Health check utilities
    curl \
    # Monitoring and debugging
    procps \
    # Security updates
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r genesis && useradd -r -g genesis -u 1000 genesis

# Create application directories
RUN mkdir -p /app /var/log/genesis /tmp/genesis && \
    chown -R genesis:genesis /app /var/log/genesis /tmp/genesis

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=genesis:genesis /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder --chown=genesis:genesis /app .

# Set environment variables for Genesis lifecycle
ENV GENESIS_SERVICE="example-service" \
    GENESIS_ENV="production" \
    GENESIS_LOG_LEVEL="INFO" \
    GENESIS_VERSION="${SERVICE_VERSION}" \
    PYTHONPATH="/app" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    # Lifecycle configuration
    LIFECYCLE_STARTUP_TIMEOUT=300 \
    LIFECYCLE_SHUTDOWN_TIMEOUT=120 \
    LIFECYCLE_HEALTH_CHECK_INTERVAL=30 \
    LIFECYCLE_ENABLE_METRICS=true \
    LIFECYCLE_ENABLE_AUTO_RESTART=false \
    # Health check configuration
    HEALTH_CHECK_PORT=8080 \
    HEALTH_CHECK_HOST=0.0.0.0 \
    # Signal handling
    TERM_TIMEOUT=120 \
    KILL_TIMEOUT=30

# Create health check script
RUN cat > /app/healthcheck.sh << 'EOF'
#!/bin/bash
set -e

# Health check script for Genesis service
# Supports startup, readiness, and liveness probes

PROBE_TYPE=${1:-liveness}
PORT=${HEALTH_CHECK_PORT:-8080}
HOST=${HEALTH_CHECK_HOST:-localhost}

case "$PROBE_TYPE" in
    startup)
        ENDPOINT="/health/startup"
        ;;
    readiness)
        ENDPOINT="/health/readiness"
        ;;
    liveness)
        ENDPOINT="/health/liveness"
        ;;
    *)
        echo "Unknown probe type: $PROBE_TYPE"
        exit 1
        ;;
esac

# Perform health check with timeout
curl --fail --silent --show-error --max-time 5 \
    "http://${HOST}:${PORT}${ENDPOINT}" > /dev/null

echo "Health check passed: $PROBE_TYPE"
EOF

RUN chmod +x /app/healthcheck.sh && chown genesis:genesis /app/healthcheck.sh

# Create startup script with proper signal handling
RUN cat > /app/start.sh << 'EOF'
#!/bin/bash
set -e

echo "Starting Genesis service with lifecycle management..."
echo "Service: $GENESIS_SERVICE"
echo "Environment: $GENESIS_ENV"
echo "Version: $GENESIS_VERSION"

# Function to handle shutdown signals
shutdown() {
    echo "Received shutdown signal, initiating graceful shutdown..."

    # Send SIGTERM to application
    if [ ! -z "$APP_PID" ]; then
        kill -TERM $APP_PID

        # Wait for graceful shutdown
        timeout=${TERM_TIMEOUT:-120}
        echo "Waiting up to ${timeout}s for graceful shutdown..."

        for i in $(seq 1 $timeout); do
            if ! kill -0 $APP_PID 2>/dev/null; then
                echo "Application shut down gracefully"
                exit 0
            fi
            sleep 1
        done

        # Force kill if still running
        echo "Graceful shutdown timeout, forcing termination..."
        kill -KILL $APP_PID 2>/dev/null || true
    fi

    exit 0
}

# Set up signal handlers
trap shutdown SIGTERM SIGINT SIGHUP

# Start the application
python -m core.lifecycle.integration_example &
APP_PID=$!

echo "Application started with PID: $APP_PID"
echo "Health checks available at http://localhost:${HEALTH_CHECK_PORT}/health/*"

# Wait for application to finish
wait $APP_PID
EOF

RUN chmod +x /app/start.sh && chown genesis:genesis /app/start.sh

# Switch to non-root user
USER genesis

# Expose ports
EXPOSE 8080 9090

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh liveness

# Set volume for temporary files
VOLUME ["/tmp/genesis", "/var/log/genesis"]

# Use dumb-init for proper signal handling and process reaping
ENTRYPOINT ["dumb-init", "--"]

# Default command
CMD ["/app/start.sh"]

# Build-time tests (optional)
# RUN python -m pytest tests/ --no-cov -v

# Security: Remove write permissions from application files
USER root
RUN find /app -type f -exec chmod 444 {} \; && \
    find /app -type d -exec chmod 555 {} \; && \
    chmod 555 /app/start.sh /app/healthcheck.sh
USER genesis
