# OpenTelemetry Collector Configuration
# Unified telemetry collection for metrics, logs, and traces

receivers:
  # OTLP receiver for applications using OpenTelemetry SDKs
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver for scraping Prometheus-format metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

  # Host metrics receiver for infrastructure monitoring
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      disk:
        metrics:
          system.disk.io:
            enabled: true
      network:
        metrics:
          system.network.io:
            enabled: true
      load:
      processes:

  # Google Cloud Pub/Sub receiver
  googlecloudpubsub:
    project: "${GCP_PROJECT}"
    subscription: "otel-metrics-subscription"
    encoding: "otlp_proto"

  # Jaeger receiver for trace data
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268

  # Zipkin receiver for trace data
  zipkin:
    endpoint: 0.0.0.0:9411

processors:
  # Batch processor for efficient data handling
  batch:
    timeout: 10s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512

  # Resource processor to add metadata
  resource:
    attributes:
      - key: service.namespace
        value: "${SERVICE_NAMESPACE}"
        action: upsert
      - key: deployment.environment
        value: "${ENVIRONMENT}"
        action: upsert
      - key: k8s.cluster.name
        value: "${K8S_CLUSTER_NAME}"
        action: upsert
      - key: gcp.project.id
        value: "${GCP_PROJECT}"
        action: upsert

  # Attributes processor for data enrichment
  attributes:
    actions:
      - key: http.user_agent
        action: delete
      - key: net.peer.ip
        action: hash

  # Resource detection processor
  resourcedetection:
    detectors: [gcp, system]
    system:
      hostname_sources: ["os"]

  # Probabilistic sampling for traces (1% sample rate)
  probabilistic_sampler:
    sampling_percentage: 1.0

  # Tail sampling for intelligent trace sampling
  tail_sampling:
    decision_wait: 10s
    num_traces: 50000
    policies:
      - name: error_policy
        type: status_code
        status_code: {status_codes: [ERROR]}
      - name: high_latency_policy
        type: latency
        latency: {threshold_ms: 1000}
      - name: random_policy
        type: probabilistic
        probabilistic: {sampling_percentage: 1}

exporters:
  # Google Cloud Monitoring for metrics
  googlecloud:
    project: "${GCP_PROJECT}"
    metric:
      prefix: "custom.googleapis.com/"
    trace:
      attribute_mappings:
        - key: "gcp.project_id"
          replacement: "${GCP_PROJECT}"

  # Google Cloud Trace for distributed tracing
  googlecloudtrace:
    project: "${GCP_PROJECT}"

  # Prometheus remote write
  prometheusremotewrite:
    endpoint: "${PROMETHEUS_REMOTE_WRITE_ENDPOINT}"
    auth:
      authenticator: basicauth
    resource_to_telemetry_conversion:
      enabled: true

  # Jaeger for trace visualization
  jaeger:
    endpoint: "${JAEGER_ENDPOINT}"
    tls:
      insecure: false

  # Logging exporter for debugging
  logging:
    loglevel: info

  # File exporter for local development
  file:
    path: ./otel-data.json

  # Google Cloud Pub/Sub for stream processing
  googlecloudpubsub:
    project: "${GCP_PROJECT}"
    topic: "otel-telemetry"

extensions:
  # Health check endpoint
  health_check:
    endpoint: 0.0.0.0:13133

  # pprof for performance profiling
  pprof:
    endpoint: 0.0.0.0:1777

  # zpages for debugging
  zpages:
    endpoint: 0.0.0.0:55679

  # Basic auth extension
  basicauth:
    client_auth:
      username: "${PROMETHEUS_USERNAME}"
      password: "${PROMETHEUS_PASSWORD}"

service:
  extensions: [health_check, pprof, zpages, basicauth]
  
  pipelines:
    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus, hostmetrics, googlecloudpubsub]
      processors: [memory_limiter, batch, resource, resourcedetection]
      exporters: [googlecloud, prometheusremotewrite, logging]

    # Traces pipeline
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: [memory_limiter, tail_sampling, batch, resource, attributes]
      exporters: [googlecloudtrace, jaeger, logging]

    # Logs pipeline (when logs are enabled)
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource]
      exporters: [googlecloud, logging]

  # Telemetry configuration
  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8888
      level: detailed
    traces:
      processors: [batch]