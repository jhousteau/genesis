---
# Monitoring Orchestrator Configuration for Universal Platform

# Global settings
log_level: INFO
discovery_interval: 60          # Service discovery interval in seconds
config_update_interval: 300     # Configuration update interval in seconds
health_check_interval: 30       # Health check interval in seconds
max_workers: 4                  # Maximum concurrent workers

# Component configuration
service_discovery:
  config_file: "discovery-config.yaml"
  enabled: true
  continuous_mode: true
  
config_manager:
  config_file: "config-manager.yaml"
  enabled: true
  auto_update: true
  
# Automation features
automation_features:
  auto_scaling_alerts: true      # Monitor for auto-scaling needs
  slo_monitoring: true           # Monitor SLO compliance
  cost_optimization: true        # Analyze cost optimization opportunities
  security_monitoring: true      # Monitor security events
  performance_tuning: true       # Analyze performance optimization
  capacity_planning: true        # Capacity planning analysis
  anomaly_detection: true        # Detect anomalies in metrics

# Thresholds and limits
thresholds:
  service_change_threshold: 0.1   # Trigger config update if >10% of services change
  config_update_timeout: 120      # Timeout for configuration updates
  health_check_timeout: 30        # Timeout for health checks
  alert_threshold_cpu: 80         # CPU usage alert threshold
  alert_threshold_memory: 85      # Memory usage alert threshold
  alert_threshold_disk: 90        # Disk usage alert threshold
  slo_violation_threshold: 0.05   # SLO violation threshold (5%)
  cost_anomaly_threshold: 0.2     # Cost anomaly threshold (20% increase)

# SLO monitoring configuration
slo_monitoring:
  check_interval: 300            # Check SLOs every 5 minutes
  error_budget_alert_thresholds:
    - 50  # Alert when 50% of error budget is consumed
    - 75  # Alert when 75% of error budget is consumed
    - 90  # Alert when 90% of error budget is consumed
  burn_rate_windows:
    - "1h"    # 1 hour burn rate
    - "6h"    # 6 hour burn rate
    - "24h"   # 24 hour burn rate
    - "72h"   # 72 hour burn rate

# Cost optimization settings
cost_optimization:
  check_interval: 3600          # Check costs every hour
  analysis_window: "24h"        # Analyze costs over 24 hours
  savings_threshold: 100        # Alert if potential savings > $100
  underutilization_threshold: 0.2  # Resources with <20% utilization
  optimization_targets:
    - "compute_instances"
    - "storage_volumes"
    - "network_bandwidth"
    - "database_connections"

# Security monitoring configuration
security_monitoring:
  check_interval: 300           # Check security events every 5 minutes
  threat_intelligence: true     # Enable threat intelligence feeds
  anomaly_detection: true       # Enable security anomaly detection
  compliance_checks: true       # Enable compliance checking
  alert_on_events:
    - "authentication_failures"
    - "privilege_escalation"
    - "suspicious_network_activity"
    - "malware_detection"
    - "policy_violations"

# Performance tuning configuration
performance_tuning:
  check_interval: 900           # Check performance every 15 minutes
  analysis_window: "1h"         # Analyze performance over 1 hour
  optimization_suggestions: true
  auto_tuning_enabled: false    # Disable auto-tuning by default
  metrics_to_analyze:
    - "response_time"
    - "throughput"
    - "error_rate"
    - "resource_utilization"
    - "queue_depth"

# Capacity planning configuration
capacity_planning:
  check_interval: 3600          # Check capacity every hour
  forecast_window: "7d"         # Forecast capacity for 7 days
  growth_threshold: 0.8         # Alert when capacity reaches 80%
  seasonal_analysis: true       # Include seasonal patterns
  resources_to_monitor:
    - "cpu"
    - "memory"
    - "storage"
    - "network"
    - "database_connections"

# Anomaly detection configuration
anomaly_detection:
  check_interval: 300           # Check for anomalies every 5 minutes
  algorithms:
    - "statistical"             # Statistical anomaly detection
    - "machine_learning"        # ML-based anomaly detection
    - "threshold_based"         # Simple threshold-based detection
  sensitivity: "medium"         # low, medium, high
  historical_data_window: "7d" # Use 7 days of historical data
  
# Notification configuration
notification:
  webhooks:
    - "${GENERAL_WEBHOOK_URL}"
    - "${MONITORING_WEBHOOK_URL}"
  slack_channels:
    - "#monitoring-automation"
    - "#ops-alerts"
  email_recipients:
    - "ops-team@universal-platform.com"
    - "monitoring-team@universal-platform.com"
  notification_rules:
    critical:
      immediate: true
      channels: ["slack", "email", "webhook"]
    warning:
      immediate: false
      channels: ["slack"]
      throttle_minutes: 30
    info:
      immediate: false
      channels: ["slack"]
      throttle_minutes: 60

# Persistence configuration
persistence:
  state_file: "/var/lib/monitoring/orchestrator-state.json"
  metrics_file: "/var/lib/monitoring/orchestrator-metrics.json"
  history_file: "/var/lib/monitoring/orchestrator-history.json"
  backup_enabled: true
  backup_interval: 3600         # Backup every hour
  backup_retention_days: 30     # Retain backups for 30 days

# API configuration
api:
  enabled: true
  host: "0.0.0.0"
  port: 8080
  auth_enabled: false
  api_key: "${ORCHESTRATOR_API_KEY}"
  endpoints:
    - "/status"
    - "/metrics"
    - "/services"
    - "/config"
    - "/health"

# Integration settings
integrations:
  prometheus:
    url: "http://prometheus:9090"
    timeout: 30
    
  grafana:
    url: "http://grafana:3000"
    api_key: "${GRAFANA_API_KEY}"
    timeout: 30
    
  alertmanager:
    url: "http://alertmanager:9093"
    timeout: 30
    
  jaeger:
    url: "http://jaeger-query:16686"
    timeout: 30
    
  elasticsearch:
    url: "http://elasticsearch:9200"
    timeout: 30

# Feature flags
feature_flags:
  experimental_features: false
  beta_features: true
  advanced_analytics: true
  machine_learning: false
  auto_remediation: false
  predictive_scaling: false

# Logging configuration
logging:
  level: INFO
  format: "json"
  file: "/var/log/monitoring-orchestrator.log"
  rotation: "daily"
  retention_days: 30
  
# Metrics configuration for the orchestrator itself
self_metrics:
  enabled: true
  port: 9090
  path: "/metrics"
  interval: 15
  
# Health check configuration
health_checks:
  enabled: true
  port: 8081
  path: "/health"
  timeout: 10
  
# Shutdown configuration
shutdown:
  graceful_timeout: 30          # Graceful shutdown timeout in seconds
  force_kill_timeout: 60        # Force kill timeout in seconds