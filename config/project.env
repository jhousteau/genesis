#!/usr/bin/env bash
# ====================================================================
# Genesis Project Configuration - Single Source of Truth
# ====================================================================
# This file defines all project naming, paths, and environment settings
# All other configs should reference these variables instead of hardcoding

# ====================================================================
# CORE PROJECT IDENTITY
# ====================================================================
# Master project name (lowercase, hyphens only)
PROJECT_NAME="genesis"

# Project display name (for documentation)
PROJECT_DISPLAY_NAME="Genesis Universal Platform"

# Project description
PROJECT_DESCRIPTION="Universal cloud platform with intelligent automation and comprehensive monitoring"

# Repository configuration
REPOSITORY_OWNER="jameshousteau"
REPOSITORY_NAME="${PROJECT_NAME}"
REPOSITORY_URL="https://github.com/${REPOSITORY_OWNER}/${PROJECT_NAME}"

# ====================================================================
# INFRASTRUCTURE NAMING
# ====================================================================
# Base application name for all GCP resources
APP_NAME="${PROJECT_NAME}"

# Network naming patterns
NETWORK_NAME_PATTERN="${APP_NAME}-network-{environment}"
SUBNET_NAME_PATTERN="${APP_NAME}-subnet-{environment}-{region}"
NETWORK_TAG_PATTERN="${APP_NAME}-{environment}"

# Service account patterns
SERVICE_ACCOUNT_PATTERN="${APP_NAME}-sa-{role}-{environment}"
WORKLOAD_IDENTITY_SA_PATTERN="${APP_NAME}-wi-{service}-{environment}"

# Terraform state bucket pattern (includes project for global uniqueness)
TF_STATE_BUCKET_PATTERN="tf-state-${PROJECT_NAME}-{environment}"

# Container registry pattern
CONTAINER_REGISTRY_PATTERN="${APP_NAME}-registry-{environment}"
ARTIFACT_REGISTRY_PATTERN="${APP_NAME}-artifacts-{environment}"

# Compute naming patterns
VM_NAME_PATTERN="${APP_NAME}-vm-{service}-{environment}"
INSTANCE_GROUP_PATTERN="${APP_NAME}-ig-{service}-{environment}"
GKE_CLUSTER_PATTERN="${APP_NAME}-gke-{environment}"

# Storage naming patterns
DISK_NAME_PATTERN="${APP_NAME}-disk-{service}-{environment}"
BUCKET_NAME_PATTERN="${APP_NAME}-{purpose}-{environment}"

# Database naming patterns
CLOUD_SQL_INSTANCE_PATTERN="${APP_NAME}-sql-{environment}"
FIRESTORE_DB_PATTERN="${APP_NAME}-firestore-{environment}"
BIGTABLE_INSTANCE_PATTERN="${APP_NAME}-bigtable-{environment}"

# ====================================================================
# SERVICE DEFINITIONS
# ====================================================================
# Core services in the Genesis platform
CORE_SERVICES=(
    "api"           # API Gateway
    "web"           # Web Frontend
    "worker"        # Background Workers
    "scheduler"     # Task Scheduler
    "monitor"       # Monitoring Service
)

# Intelligence services
INTELLIGENCE_SERVICES=(
    "solve"         # Problem-solving orchestrator
    "autofix"       # Auto-fix system
    "smart-commit"  # Intelligent commit system
)

# Infrastructure services
INFRA_SERVICES=(
    "terraform"     # Infrastructure as Code
    "ansible"       # Configuration Management
    "vault"         # Secrets Management
)

# All services combined
ALL_SERVICES=("${CORE_SERVICES[@]}" "${INTELLIGENCE_SERVICES[@]}" "${INFRA_SERVICES[@]}")

# Default service
DEFAULT_SERVICE="api"

# ====================================================================
# ENVIRONMENT DEFINITIONS
# ====================================================================
# Supported environments
ENVIRONMENTS=("dev" "test" "staging" "prod")

# Default environment
DEFAULT_ENVIRONMENT="dev"

# Environment-specific PROJECT_IDs
# Update these with your actual GCP project IDs
PROJECT_ID_DEV="whai-genesis-dev"
PROJECT_ID_TEST="whai-genesis-test"
PROJECT_ID_STAGING="whai-genesis-staging"
PROJECT_ID_PROD="whai-genesis-prod"

# Environment characteristics
declare -A ENV_CHARACTERISTICS=(
    ["dev"]="development|experimental|unstable"
    ["test"]="testing|validation|ci"
    ["staging"]="pre-production|uat|staging"
    ["prod"]="production|stable|live"
)

# ====================================================================
# INFRASTRUCTURE DEFAULTS
# ====================================================================
# Default GCP settings (can be overridden per environment)
DEFAULT_REGION="us-central1"
DEFAULT_ZONE="us-central1-a"

# Multi-region configuration
MULTI_REGIONS=("us-central1" "us-east1" "europe-west1")
BACKUP_REGION="us-east1"

# Network defaults
DEFAULT_SUBNET_CIDR="10.0.0.0/24"
DEFAULT_SECONDARY_RANGE_PODS="10.1.0.0/16"
DEFAULT_SECONDARY_RANGE_SERVICES="10.2.0.0/20"

# Compute defaults
DEFAULT_MACHINE_TYPE="e2-standard-4"
DEFAULT_PREEMPTIBLE=true
DEFAULT_ENABLE_PUBLIC_IP=false
DEFAULT_ENABLE_OS_LOGIN=true

# GKE defaults
DEFAULT_GKE_NODE_COUNT=3
DEFAULT_GKE_MIN_NODES=1
DEFAULT_GKE_MAX_NODES=10
DEFAULT_GKE_MACHINE_TYPE="e2-standard-2"
DEFAULT_ENABLE_AUTOPILOT=false

# Storage defaults
DEFAULT_DISK_SIZE=100
DEFAULT_DISK_TYPE="pd-standard"
DEFAULT_BOOT_DISK_SIZE=20
DEFAULT_BOOT_DISK_TYPE="pd-standard"
DEFAULT_BOOT_DISK_IMAGE="projects/cos-cloud/global/images/family/cos-stable"
DEFAULT_ENABLE_BACKUPS=true
DEFAULT_BACKUP_RETENTION_DAYS=30

# Database defaults
DEFAULT_DB_TIER="db-f1-micro"
DEFAULT_DB_VERSION="POSTGRES_14"
DEFAULT_DB_BACKUP_ENABLED=true
DEFAULT_DB_HIGH_AVAILABILITY=false

# Cost management defaults
DEFAULT_MONTHLY_BUDGET=1000
DEFAULT_ALERT_THRESHOLD_PERCENT=80
DEFAULT_AUTO_SHUTDOWN_HOURS=8
DEFAULT_ENABLE_AUTO_SHUTDOWN=true

# Security defaults
DEFAULT_ENABLE_PRIVATE_GOOGLE_ACCESS=true
DEFAULT_ENABLE_FLOW_LOGS=true
DEFAULT_ENABLE_CLOUD_ARMOR=false
DEFAULT_ENABLE_CLOUD_NAT=true

# Monitoring defaults
DEFAULT_LOG_RETENTION_DAYS=30
DEFAULT_METRIC_RETENTION_DAYS=90
DEFAULT_ENABLE_MONITORING=true
DEFAULT_ENABLE_LOGGING=true
DEFAULT_ENABLE_TRACING=true
DEFAULT_ENABLE_PROFILING=false

# ====================================================================
# FILE PATHS AND DIRECTORIES
# ====================================================================
# Configuration directories
CONFIG_DIR="config"
ENVIRONMENTS_DIR="${CONFIG_DIR}/environments"
TERRAFORM_DIR="terraform"
SCRIPTS_DIR="scripts"
DOCS_DIR="docs"

# Secrets and credentials (never commit these)
SECRETS_DIR=".secrets"
CREDENTIALS_DIR=".credentials"

# Temporary and cache directories
TEMP_DIR=".tmp"
CACHE_DIR=".cache"
BUILD_DIR="build"
DIST_DIR="dist"

# Log directories
LOGS_DIR="logs"
AUDIT_LOG_DIR="${LOGS_DIR}/audit"

# ====================================================================
# UTILITY FUNCTIONS
# ====================================================================
# Function to expand patterns with environment
expand_env_pattern() {
    local pattern="$1"
    local environment="$2"
    echo "${pattern//\{environment\}/$environment}"
}

# Function to expand patterns with service
expand_service_pattern() {
    local pattern="$1"
    local service="$2"
    echo "${pattern//\{service\}/$service}"
}

# Function to expand patterns with region
expand_region_pattern() {
    local pattern="$1"
    local region="$2"
    echo "${pattern//\{region\}/$region}"
}

# Function to expand all pattern variables
expand_full_pattern() {
    local pattern="$1"
    local environment="$2"
    local service="${3:-}"
    local region="${4:-$DEFAULT_REGION}"
    local role="${5:-default}"
    local purpose="${6:-general}"
    
    local result="$pattern"
    result="${result//\{environment\}/$environment}"
    result="${result//\{service\}/$service}"
    result="${result//\{region\}/$region}"
    result="${result//\{role\}/$role}"
    result="${result//\{purpose\}/$purpose}"
    
    echo "$result"
}

# Function to get PROJECT_ID for environment
get_project_id() {
    local environment="$1"
    case "$environment" in
        "dev") echo "$PROJECT_ID_DEV" ;;
        "test") echo "$PROJECT_ID_TEST" ;;
        "staging") echo "$PROJECT_ID_STAGING" ;;
        "prod") echo "$PROJECT_ID_PROD" ;;
        *) echo "" ;;
    esac
}

# Function to check if environment is production
is_production() {
    local environment="$1"
    [[ "$environment" == "prod" ]] || [[ "$environment" == "production" ]]
}

# Function to get Terraform state bucket
get_tf_state_bucket() {
    local environment="$1"
    expand_env_pattern "$TF_STATE_BUCKET_PATTERN" "$environment"
}

# Function to get service account email
get_service_account_email() {
    local role="$1"
    local environment="$2"
    local project_id=$(get_project_id "$environment")
    local sa_name=$(expand_full_pattern "$SERVICE_ACCOUNT_PATTERN" "$environment" "" "" "$role")
    echo "${sa_name}@${project_id}.iam.gserviceaccount.com"
}

# ====================================================================
# VALIDATION
# ====================================================================
# Validate this configuration
validate_config() {
    local errors=0

    # Check required variables
    if [[ -z "$PROJECT_NAME" ]]; then
        echo "ERROR: PROJECT_NAME is required" >&2
        ((errors++))
    fi

    # Validate project name format (lowercase, hyphens only)
    if [[ ! "$PROJECT_NAME" =~ ^[a-z][a-z0-9-]*[a-z0-9]$ ]]; then
        echo "ERROR: PROJECT_NAME must be lowercase with hyphens only" >&2
        ((errors++))
    fi

    # Check environments
    if [[ ${#ENVIRONMENTS[@]} -eq 0 ]]; then
        echo "ERROR: At least one environment must be defined" >&2
        ((errors++))
    fi

    # Validate PROJECT_IDs are set
    for env in "${ENVIRONMENTS[@]}"; do
        local project_id=$(get_project_id "$env")
        if [[ -z "$project_id" ]]; then
            echo "WARNING: PROJECT_ID for environment '$env' is not set" >&2
        fi
    done

    return $errors
}

# Auto-validate when sourced (only if not in CI)
if [[ "${BASH_SOURCE[0]}" != "${0}" ]] && [[ -z "${CI:-}" ]]; then
    if ! validate_config; then
        echo "WARNING: Configuration validation found issues" >&2
    fi
fi

# Export commonly used variables
export PROJECT_NAME
export DEFAULT_REGION
export DEFAULT_ZONE
export DEFAULT_ENVIRONMENT