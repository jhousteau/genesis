#!/bin/bash

# üîí GCP Per-Repo Isolation Setup Script
# Agent-ready template that makes each repo its own isolated gcloud universe
# 
# Based on: https://github.com/anthropics/claude-code/issues/agent-isolation
# Goal: Zero cross-contamination between projects, idempotent setup

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

show_usage() {
    cat << 'EOF'
üîí GCP Per-Repo Isolation Setup

Creates agent-ready GCP isolation with per-repository gcloud configs,
service account impersonation, and production safety guards.

Usage: ./setup-gcp-isolation-universal.sh [OPTIONS]

OPTIONS:
    -p, --project NAME          Project name (e.g., 'agent-cage', 'solve')
    -e, --env ENVIRONMENT       Environment (dev, staging, prod) [default: dev]
    -r, --region REGION         GCP region [default: us-central1]
    -s, --service-account SA    Deploy service account for impersonation
    --org ORG                   Organization prefix [default: PROJECT_NAME]
    --force                     Overwrite existing configuration
    -h, --help                  Show this help

EXAMPLES:
    # Basic setup (creates myapp-dev project)
    ./setup-gcp-isolation-universal.sh --project myapp

    # Full setup with impersonation
    ./setup-gcp-isolation-universal.sh \
      --project agent-cage \
      --env staging \
      --org whitehorse \
      --service-account deploy-staging@whitehorse-agent-cage-staging.iam.gserviceaccount.com

    # Production setup (requires extra confirmation)
    ./setup-gcp-isolation-universal.sh \
      --project myapp \
      --env prod \
      --service-account deploy-prod@myorg-myapp-prod.iam.gserviceaccount.com

WHAT IT CREATES:
    üìÅ .envrc                    # Environment configuration for auto-isolation
    üìÅ scripts/bootstrap_gcloud.sh   # Idempotent gcloud setup
    üìÅ scripts/gcloud_guard.sh       # Safe gcloud wrapper
    üìÅ scripts/self_check.sh         # Verification script
    üìÅ Makefile                      # Standard deployment targets
    üìÅ .github/workflows/deploy.yaml # CI/CD template
    üìÅ README_GCP_ISOLATION.md       # Documentation

EOF
}

# Default values
PROJECT_NAME=""
ENVIRONMENT="dev"
REGION="us-central1"
ZONE=""
ORG=""
SERVICE_ACCOUNT=""
FORCE=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--project)
            PROJECT_NAME="$2"
            shift 2
            ;;
        -e|--env)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -r|--region)
            REGION="$2"
            shift 2
            ;;
        -s|--service-account)
            SERVICE_ACCOUNT="$2"
            shift 2
            ;;
        --org)
            ORG="$2"
            shift 2
            ;;
        --force)
            FORCE=true
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Validate required parameters
if [[ -z "$PROJECT_NAME" ]]; then
    log_error "Project name is required. Use --project NAME"
    show_usage
    exit 1
fi

# Set defaults
ORG="${ORG:-$PROJECT_NAME}"
PROJECT_ID="${PROJECT_NAME}-${ENVIRONMENT}"
# Set zone based on region (handle regions without -a zones)
if [[ -z "$ZONE" ]]; then
    case "$REGION" in
        us-east1) ZONE="us-east1-b" ;;
        us-east4) ZONE="us-east4-a" ;;
        us-east5) ZONE="us-east5-a" ;;
        *) ZONE="${REGION}-a" ;;
    esac
fi
REPO_GCLOUD_HOME="$HOME/.gcloud/${PROJECT_NAME}-${ENVIRONMENT}"

# Auto-detect service account if not provided
if [[ -z "$SERVICE_ACCOUNT" ]]; then
    SERVICE_ACCOUNT="deploy-${ENVIRONMENT}@${PROJECT_ID}.iam.gserviceaccount.com"
fi

log_info "Setting up GCP isolation with agent-ready template"
echo "üìÅ Project: ${PROJECT_NAME}"
echo "üåç Environment: ${ENVIRONMENT}"
echo "‚òÅÔ∏è  GCP Project: ${PROJECT_ID}"
echo "üìç Region: ${REGION}"
echo "üîê Service Account: ${SERVICE_ACCOUNT}"
echo "üè† Repo Gcloud Home: ${REPO_GCLOUD_HOME}"

# Check for existing configuration
if [[ -f ".envrc" ]] && [[ "$FORCE" != true ]]; then
    log_warning "Configuration already exists. Use --force to overwrite."
    exit 1
fi

# Create .envrc file (step 2 from template)
log_info "Creating .envrc for per-repo isolation..."
cat > .envrc << EOF
# üîí GCP Per-Repo Isolation Configuration
# This repo uses its own gcloud config directory to prevent cross-contamination
# Generated by setup-gcp-isolation-universal.sh

# ==== Core Variables ====
export PROJECT_ID="${PROJECT_ID}"
export REGION="${REGION}"
export ZONE="${ZONE}"
export ENVIRONMENT="${ENVIRONMENT}"

# ==== Per-Repo Gcloud Isolation ====
# This repo's private gcloud config directory
export REPO_GCLOUD_HOME="${REPO_GCLOUD_HOME}"
export CLOUDSDK_CONFIG="\${REPO_GCLOUD_HOME}"

# Name of the config inside this directory
export CLOUDSDK_ACTIVE_CONFIG_NAME="default"

# ==== Service Account Impersonation (Recommended) ====
# Safer than local keys - impersonate a minimal-deploy SA per env
export DEPLOY_SA="${SERVICE_ACCOUNT}"
export GCLOUD_IMPERSONATE_SA="\${DEPLOY_SA}"

# ==== Application Default Credentials (if needed) ====
# Keep credentials repository-local to prevent cross-project access
# export GOOGLE_APPLICATION_CREDENTIALS="\$PWD/.secrets/\${PROJECT_ID}-adc.json"

# ==== Production Safety ====
# Block prod operations unless explicitly confirmed
if [[ "\${PROJECT_ID}" =~ (^|-)prod(-|$) ]] || [[ "\${ENVIRONMENT}" == "prod" ]]; then
    echo "‚ö†Ô∏è  WARNING: Production environment detected: \${ENVIRONMENT} (\${PROJECT_ID})"
    echo "   Set CONFIRM_PROD=I_UNDERSTAND to enable production operations"
    # export CONFIRM_PROD="I_UNDERSTAND"  # Uncomment only when needed
fi

# ==== Auto-Bootstrap ====
# Run bootstrap on first entry to this directory
if [[ -f "isolation/gcp/scripts/bootstrap_gcloud.sh" ]] && [[ ! -d "\${REPO_GCLOUD_HOME}" ]]; then
    echo "üîí First time setup detected. Running GCP isolation bootstrap..."
    ./isolation/gcp/scripts/bootstrap_gcloud.sh
elif [[ -f "scripts/bootstrap_gcloud.sh" ]] && [[ ! -d "\${REPO_GCLOUD_HOME}" ]]; then
    echo "üîí First time setup detected. Running GCP isolation bootstrap..."
    ./scripts/bootstrap_gcloud.sh
fi

# ==== Development Environment ====
# Add project scripts to PATH
export PATH="\$PWD/scripts:\$PATH"

# Python virtual environment (if applicable)
if [[ -d ".venv" ]]; then
    source .venv/bin/activate
fi

# Node.js local binaries (if applicable)
if [[ -d "node_modules/.bin" ]]; then
    export PATH="\$PWD/node_modules/.bin:\$PATH"
fi

# Show current context
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üìÅ Project: ${PROJECT_NAME}"
echo "üåç Environment: \${ENVIRONMENT}"
echo "‚òÅÔ∏è  GCP Project: \${PROJECT_ID}"
echo "üìç Region: \${REGION}"
echo "üîí Config: \${CLOUDSDK_CONFIG}"
echo "üîê SA: \${GCLOUD_IMPERSONATE_SA}"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
EOF

# Create scripts directory
mkdir -p scripts

# Create bootstrap script (step 3 from template)
log_info "Creating idempotent bootstrap script..."
cat > scripts/bootstrap_gcloud.sh << 'EOF'
#!/usr/bin/env bash
# üîí GCP Bootstrap Script - Idempotent Setup
# Creates per-repo gcloud configuration with automatic SA creation

set -euo pipefail

: "${PROJECT_ID:?PROJECT_ID required}"
: "${REGION:?REGION required}"
: "${ENVIRONMENT:?ENVIRONMENT required}"

# Get current user for IAM binding
CURRENT_USER=$(gcloud auth list --filter=status:ACTIVE --format="value(account)" 2>/dev/null | head -n1)

# If no active user, prompt for login
if [[ -z "$CURRENT_USER" ]]; then
    echo "üîß No active gcloud user found. Running gcloud auth login..."
    gcloud auth login
    CURRENT_USER=$(gcloud auth list --filter=status:ACTIVE --format="value(account)" 2>/dev/null | head -n1)
    : "${CURRENT_USER:?Failed to authenticate. Please check your gcloud installation}"
fi

echo "üîß Using authenticated user: ${CURRENT_USER}"

# Ensure per-repo config folder exists
mkdir -p "${CLOUDSDK_CONFIG:-$HOME/.gcloud/_missing_repo_config}"
echo "üîß Using CLOUDSDK_CONFIG=${CLOUDSDK_CONFIG}"

# Create 'default' config if absent
if ! gcloud config configurations list --format="value(name)" 2>/dev/null | grep -qx "default"; then
    echo "üîß Creating default configuration..."
    gcloud config configurations create default >/dev/null
fi

# Activate the default configuration
gcloud config configurations activate default >/dev/null

# Clear any existing impersonation to avoid conflicts
echo "üîß Clearing any existing impersonation..."
gcloud config unset auth/impersonate_service_account --configuration=default 2>/dev/null || true

# Set core properties
echo "üîß Setting project: ${PROJECT_ID}"
gcloud config set core/project "${PROJECT_ID}" --configuration=default

# Enable required APIs first
echo "üîß Enabling required APIs..."
gcloud services enable cloudresourcemanager.googleapis.com --project="${PROJECT_ID}" --quiet 2>/dev/null || true
gcloud services enable iam.googleapis.com --project="${PROJECT_ID}" --quiet 2>/dev/null || true
gcloud services enable compute.googleapis.com --project="${PROJECT_ID}" --quiet 2>/dev/null || true

echo "üîß Setting region: ${REGION}"
gcloud config set compute/region "${REGION}" --configuration=default

# Set zone if provided
if [[ -n "${ZONE:-}" ]]; then
    echo "üîß Setting zone: ${ZONE}"
    gcloud config set compute/zone "${ZONE}" --configuration=default
fi

# Create and configure service account if specified
if [[ -n "${DEPLOY_SA:-}" ]]; then
    SA_NAME="deploy-${ENVIRONMENT}"
    SA_EMAIL="${DEPLOY_SA}"
    
    echo "üîß Checking service account: ${SA_EMAIL}"
    
    # Check if service account exists
    if ! gcloud iam service-accounts describe "${SA_EMAIL}" --project="${PROJECT_ID}" >/dev/null 2>&1; then
        echo "üîß Creating service account: ${SA_NAME}"
        gcloud iam service-accounts create "${SA_NAME}" \
            --project="${PROJECT_ID}" \
            --display-name="Deploy Service Account for ${ENVIRONMENT}" \
            --description="Automated deployment service account for ${ENVIRONMENT} environment"
        
        echo "‚úÖ Service account created: ${SA_EMAIL}"
    else
        echo "‚úÖ Service account already exists: ${SA_EMAIL}"
    fi
    
    # Grant necessary IAM roles to the service account
    echo "üîß Configuring IAM roles for service account..."
    
    # Core deployment roles
    ROLES=(
        "roles/run.developer"              # Cloud Run deployment
        "roles/storage.admin"              # Artifact Registry/Storage
        "roles/iam.serviceAccountUser"     # Act as service accounts
        "roles/cloudsql.client"            # Cloud SQL access
        "roles/secretmanager.secretAccessor" # Secret Manager access
        "roles/monitoring.metricWriter"    # Monitoring
        "roles/logging.logWriter"          # Logging
    )
    
    for role in "${ROLES[@]}"; do
        echo "  ‚Üí Granting ${role}"
        gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
            --member="serviceAccount:${SA_EMAIL}" \
            --role="${role}" \
            --condition=None \
            --quiet 2>/dev/null || true
    done
    
    # Allow current user to impersonate the service account
    echo "üîß Allowing ${CURRENT_USER} to impersonate ${SA_EMAIL}"
    gcloud iam service-accounts add-iam-policy-binding "${SA_EMAIL}" \
        --member="user:${CURRENT_USER}" \
        --role="roles/iam.serviceAccountTokenCreator" \
        --project="${PROJECT_ID}" \
        --quiet 2>/dev/null || true
    
    # Configure gcloud to use impersonation
    echo "üîß Setting impersonation: ${SA_EMAIL}"
    gcloud config set auth/impersonate_service_account "${SA_EMAIL}" --configuration=default
    
    echo "‚úÖ Service account configuration complete"
fi

# Non-interactive by default for agents
gcloud config set core/disable_prompts true --configuration=default

# Update ADC quota project if possible
if gcloud auth application-default print-access-token >/dev/null 2>&1; then
    echo "üîß Updating ADC quota project to: ${PROJECT_ID}"
    gcloud auth application-default set-quota-project "${PROJECT_ID}" 2>/dev/null || true
fi

echo "‚úÖ Bootstrap complete"
echo ""
echo "---- gcloud config (repo-scoped) ----"
gcloud config list --configuration=default

if [[ -n "${DEPLOY_SA:-}" ]]; then
    echo ""
    echo "---- service account verification ----"
    echo "üîß Testing impersonation..."
    if gcloud auth print-access-token --impersonate-service-account="${DEPLOY_SA}" >/dev/null 2>&1; then
        echo "‚úÖ Service account impersonation working"
    else
        echo "‚ö†Ô∏è  Service account impersonation may need time to propagate"
    fi
fi
EOF

chmod +x scripts/bootstrap_gcloud.sh

# Create guard wrapper (step 4 from template)
log_info "Creating gcloud guard wrapper..."
cat > scripts/gcloud_guard.sh << 'EOF'
#!/usr/bin/env bash
# üîí GCloud Guard - Prevents Wrong-Project Operations
# Wrapper that ensures gcloud commands run in the correct isolated context

set -euo pipefail

# Must be inside an isolated repo
: "${CLOUDSDK_CONFIG:?CLOUDSDK_CONFIG not set. Source .envrc to configure}"

CFG_PROJECT="$(gcloud config get-value core/project 2>/dev/null || true)"
if [[ -z "${CFG_PROJECT}" ]]; then
    echo "‚ùå No core/project configured in ${CLOUDSDK_CONFIG}"
    exit 1
fi

echo "üîí Using project: ${CFG_PROJECT} (config: ${CLOUDSDK_CONFIG})"

# Tripwire for prod
if [[ "${CFG_PROJECT}" =~ (^|-)prod(-|$) ]]; then
    : "${CONFIRM_PROD:?Set CONFIRM_PROD=I_UNDERSTAND to run against PROD}"
    [[ "${CONFIRM_PROD}" == "I_UNDERSTAND" ]] || {
        echo "‚ùå Incorrect CONFIRM_PROD value. Use: CONFIRM_PROD=I_UNDERSTAND"
        exit 1
    }
    echo "‚ö†Ô∏è  PRODUCTION MODE CONFIRMED"
fi

# Optional: require impersonation in CI
if [[ -n "${CI:-}" ]] && [[ -z "${GCLOUD_IMPERSONATE_SA:-}" ]]; then
    echo "‚ö†Ô∏è  WARNING: No service account impersonation in CI environment"
fi

# Execute the gcloud command with all arguments
exec gcloud "$@"
EOF

chmod +x scripts/gcloud_guard.sh

# Create self-check script (step 7 from template)
log_info "Creating verification script..."
cat > scripts/self_check.sh << 'EOF'
#!/usr/bin/env bash
# üîí Self-Check Script - Verify GCP Isolation Setup
# Validates that the repo-scoped gcloud configuration is correct

set -euo pipefail

expect() {
    if [[ "$1" != "$2" ]]; then
        echo "‚ùå Expected $1 == $2"
        exit 1
    fi
}

echo "üîç Verifying GCP isolation setup..."

# Check required environment variables
: "${PROJECT_ID:?PROJECT_ID not set. Source .envrc to configure}"
: "${REGION:?REGION not set}"
: "${CLOUDSDK_CONFIG:?CLOUDSDK_CONFIG not set}"

# Get current gcloud configuration
CFG_PROJECT="$(gcloud config get-value core/project 2>/dev/null || echo '')"
CFG_REGION="$(gcloud config get-value compute/region 2>/dev/null || echo '')"

echo "Expected Project: ${PROJECT_ID}"
echo "Actual Project  : ${CFG_PROJECT}"
echo "Expected Region : ${REGION}"
echo "Actual Region   : ${CFG_REGION}"
echo "Config Directory: ${CLOUDSDK_CONFIG}"

# Validate configuration matches expectations
expect "$CFG_PROJECT" "${PROJECT_ID}"
expect "$CFG_REGION" "${REGION}"

# Check that config directory exists and is isolated
if [[ ! -d "${CLOUDSDK_CONFIG}" ]]; then
    echo "‚ùå Config directory does not exist: ${CLOUDSDK_CONFIG}"
    exit 1
fi

# Verify we're not using global config
if [[ "${CLOUDSDK_CONFIG}" == "$HOME/.config/gcloud" ]] || [[ "${CLOUDSDK_CONFIG}" =~ ^/Users/[^/]+/\.config/gcloud$ ]]; then
    echo "‚ùå Using global gcloud config instead of repo-isolated config"
    exit 1
fi

# Check for service account impersonation
if [[ -n "${GCLOUD_IMPERSONATE_SA:-}" ]]; then
    CFG_SA="$(gcloud config get-value auth/impersonate_service_account 2>/dev/null || echo '')"
    if [[ -n "$CFG_SA" ]]; then
        echo "‚úÖ Service account impersonation: ${CFG_SA}"
    else
        echo "‚ö†Ô∏è  GCLOUD_IMPERSONATE_SA set but not configured in gcloud"
    fi
fi

# Check ADC if available
if gcloud auth application-default print-access-token >/dev/null 2>&1; then
    echo "‚úÖ Application Default Credentials configured"
else
    echo "‚ÑπÔ∏è  Application Default Credentials not configured (run: gcloud auth application-default login)"
fi

echo "‚úÖ Repo-scoped gcloud configuration is correct"
echo "‚úÖ GCP isolation setup verified"
EOF

chmod +x scripts/self_check.sh

# Create Makefile (step 5 from template)
log_info "Creating Makefile with standard targets..."
cat > Makefile << 'EOF'
# üîí GCP-Isolated Makefile
# Standard targets that use repo-scoped gcloud configuration

REGION ?= $(shell gcloud config get-value compute/region 2>/dev/null)
PROJECT_ID ?= $(shell gcloud config get-value core/project 2>/dev/null)

.PHONY: preflight whoami deploy logs self-check bootstrap

# Verify gcloud configuration before any operations
preflight:
	@./scripts/gcloud_guard.sh config list --format="table(name,is_active,account,project)" >/dev/null
	@echo "‚úÖ Preflight check passed"

# Show current authentication and project
whoami: preflight
	@echo "Current gcloud context:"
	@./scripts/gcloud_guard.sh auth list --format="table(account,status)"
	@echo "Project: $(PROJECT_ID)"
	@echo "Region: $(REGION)"

# Verify repo isolation setup
self-check:
	@./scripts/self_check.sh

# Bootstrap gcloud configuration
bootstrap:
	@./scripts/bootstrap_gcloud.sh

# Example deployment target (customize for your project)
deploy: preflight
	@echo "üöÄ Deploying to $(PROJECT_ID) in $(REGION)"
	@echo "Add your deployment commands here, using ./scripts/gcloud_guard.sh"
	# Example:
	# ./scripts/gcloud_guard.sh run deploy my-service \
	#   --region=$(REGION) --quiet

# View service logs (example)
logs: preflight
	@echo "üìã Recent logs for $(PROJECT_ID)"
	# Example:
	# ./scripts/gcloud_guard.sh logging read --limit=50 --format=json

# Help target
help:
	@echo "Available targets:"
	@echo "  preflight   - Verify gcloud configuration"
	@echo "  whoami      - Show current authentication"
	@echo "  self-check  - Verify repo isolation setup"
	@echo "  bootstrap   - Initialize gcloud configuration"
	@echo "  deploy      - Deploy to current environment"
	@echo "  logs        - View service logs"
	@echo "  help        - Show this help"
EOF

# Create GitHub Actions workflow (step 6 from template)
log_info "Creating GitHub Actions CI/CD template..."
mkdir -p .github/workflows
cat > .github/workflows/deploy.yaml << EOF
name: Deploy to GCP
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      confirm_prod:
        description: 'Type "I_UNDERSTAND" to deploy to production'
        required: false
        type: string
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # for workload identity federation
    
    # Set environment based on branch or manual input
    environment: \${{ inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'dev') }}
    
    env:
      PROJECT_ID: \${{ vars.PROJECT_ID }}              # Set in repository/environment variables
      REGION: \${{ vars.REGION || '${REGION}' }}
      DEPLOY_SA: \${{ vars.DEPLOY_SA }}                # deploy-<env>@<proj>.iam.gserviceaccount.com
      CLOUDSDK_CONFIG: ./.ci_gcloud                    # Ephemeral per-run config dir
      GCLOUD_IMPERSONATE_SA: \${{ vars.DEPLOY_SA }}
      ENVIRONMENT: \${{ inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'dev') }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Validate production deployment
        if: env.ENVIRONMENT == 'prod'
        run: |
          if [[ "\${{ inputs.confirm_prod }}" != "I_UNDERSTAND" ]]; then
            echo "‚ùå Production deployment requires confirm_prod: 'I_UNDERSTAND'"
            exit 1
          fi
          echo "CONFIRM_PROD=I_UNDERSTAND" >> \$GITHUB_ENV

      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: \${{ env.PROJECT_ID }}
          install_components: "gcloud"

      - name: Authenticate via Workload Identity
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: \${{ secrets.WIF_PROVIDER }}
          service_account: \${{ env.DEPLOY_SA }}

      - name: Bootstrap repo-scoped gcloud config
        run: |
          chmod +x scripts/bootstrap_gcloud.sh scripts/gcloud_guard.sh scripts/self_check.sh
          ./scripts/bootstrap_gcloud.sh

      - name: Verify setup
        run: ./scripts/self_check.sh

      - name: Deploy
        run: make deploy
EOF

# Create documentation
log_info "Creating documentation..."
cat > README_GCP_ISOLATION.md << EOF
# üîí GCP Per-Repository Isolation

This repository uses **isolated GCP configurations** to prevent cross-project contamination. Each repository has its own gcloud config directory and optional service account impersonation.

## Quick Start

1. **Source environment configuration**:
   \`\`\`bash
   source .envrc
   \`\`\`

3. **Verify setup**:
   \`\`\`bash
   make self-check
   \`\`\`

## Configuration

- **Project**: ${PROJECT_NAME}
- **Environment**: ${ENVIRONMENT}
- **GCP Project**: ${PROJECT_ID}
- **Region**: ${REGION}
- **Service Account**: ${SERVICE_ACCOUNT}

## Available Commands

\`\`\`bash
make whoami        # Show current GCP context
make self-check    # Verify isolation setup
make deploy        # Deploy to current environment
make bootstrap     # Re-initialize gcloud config
\`\`\`

## Safe gcloud Usage

Use the guard wrapper for all gcloud commands:
\`\`\`bash
./scripts/gcloud_guard.sh run deploy my-service --region=${REGION}
./scripts/gcloud_guard.sh compute instances list
\`\`\`

## Directory Structure

- \`.envrc\` - Environment configuration (source manually)
- \`scripts/bootstrap_gcloud.sh\` - Idempotent gcloud setup
- \`scripts/gcloud_guard.sh\` - Safe gcloud wrapper
- \`scripts/self_check.sh\` - Verify isolation setup
- \`Makefile\` - Standard deployment targets

## Security Features

- **Isolated configs**: Each repo uses \`~/.gcloud/${PROJECT_NAME}-${ENVIRONMENT}\`
- **Service account impersonation**: No local key files needed
- **Production guards**: Extra confirmation required for prod operations
- **CI/CD ready**: GitHub Actions workflow included

## Troubleshooting

### "CLOUDSDK_CONFIG not set"
Run \`source .envrc\` in the repository root.

### "Project mismatch" errors
Run \`make bootstrap\` to reinitialize the gcloud configuration.

### Permission denied
Ensure your account has access to the GCP project and service account.

### Production operations blocked
Set \`CONFIRM_PROD=I_UNDERSTAND\` environment variable for production deployments.
EOF

# Create .gitignore entries
if [[ -f .gitignore ]]; then
    if ! grep -q "# GCP isolation" .gitignore; then
        echo "" >> .gitignore
        echo "# GCP isolation" >> .gitignore
        echo ".ci_gcloud/" >> .gitignore
    fi
else
    cat > .gitignore << 'EOF'
# GCP isolation
.ci_gcloud/

# Environment-specific files
.env.local
EOF
fi


# Environment switching handled manually
log_info "Environment configuration created in .envrc"
log_info "Use 'source .envrc' or scripts/switch-environment.sh for environment switching"

# Run bootstrap automatically for first-time setup
log_info "Running initial bootstrap setup..."
if PROJECT_ID="${PROJECT_ID}" REGION="${REGION}" ZONE="${ZONE}" ENVIRONMENT="${ENVIRONMENT}" DEPLOY_SA="${SERVICE_ACCOUNT}" CLOUDSDK_CONFIG="${REPO_GCLOUD_HOME}" ./scripts/bootstrap_gcloud.sh; then
    log_success "Bootstrap completed successfully!"
else
    log_warning "Bootstrap failed. You may need to:"
    echo "  1. Run: gcloud auth login"
    echo "  2. Manually run: make bootstrap"
fi

log_success "GCP isolation setup complete!"
echo ""
echo "üìã Created files:"
echo "   .envrc                          # Environment configuration"
echo "   scripts/bootstrap_gcloud.sh     # Idempotent gcloud setup with automatic SA creation"
echo "   scripts/gcloud_guard.sh         # Safe gcloud wrapper"
echo "   scripts/self_check.sh           # Verification script"  
echo "   Makefile                        # Standard targets"
echo "   .github/workflows/deploy.yaml   # CI/CD template"
echo "   README_GCP_ISOLATION.md         # Documentation"
echo ""
echo "üöÄ Next steps:"
echo "   1. Verify setup: make self-check"
echo "   2. Deploy safely: make deploy"
echo ""
echo "‚ú® Your repository now has agent-ready GCP isolation!"
echo ""
echo "üîß Service Account Info:"
echo "   Current Environment: ${ENVIRONMENT}"
echo "   Service Account: ${SERVICE_ACCOUNT}"
echo "   Will be created automatically on first bootstrap run"