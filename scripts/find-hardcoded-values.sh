#!/usr/bin/env bash
# Find hardcoded values and dangerous defaults in Genesis codebase

set -euo pipefail

echo "üîç Searching for hardcoded values and dangerous defaults..."
echo

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m'

ISSUES_FOUND=0

check_pattern() {
    local pattern="$1"
    local description="$2"
    local files="$3"

    echo -e "${YELLOW}üîç Checking: $description${NC}"

    # Use git ls-files to respect .gitignore, then grep the results
    # Exclude documentation, test files, and templates
    if command -v git >/dev/null 2>&1 && git rev-parse --git-dir >/dev/null 2>&1; then
        # In a git repo - use git ls-files to respect .gitignore, exclude docs/tests/templates
        results=$(git ls-files '*.py' '*.ts' '*.tsx' '*.js' '*.jsx' | grep -v -E '(test_|_test\.|\.test\.|/tests/|/templates/|\.md$|conftest\.py|/fixtures/|mock_)' | xargs grep -E -n "$pattern" 2>/dev/null || true)
    else
        # Fallback for non-git directories
        results=$(grep -rn -E "$pattern" "$files" 2>/dev/null || true)
    fi

    if [ -n "$results" ]; then
        echo -e "${RED}‚ùå Found issues:${NC}"
        echo "$results" | head -20  # Limit output
        echo
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    else
        echo -e "${GREEN}‚úÖ No issues found${NC}"
        echo
    fi
}

# Function parameter defaults (dangerous - numbers, strings, hardcoded values)
check_pattern 'def [^(]*\([^)]*=[ \t]*[0-9"[{]' "Function parameters with dangerous default values" "."

# Click command defaults
check_pattern '@click\.option\([^)]*default=' "Click options with default values" "."

# Environment variable fallbacks
check_pattern 'os\.environ\.get\([^,)]*,\s*["\047][^"\047]*["\047]\)' "Environment variable fallbacks with hardcoded strings" "."

# Dataclass field defaults
check_pattern '@dataclass.*\n.*=.*[0-9]' "Dataclass fields with numeric defaults" "."

# Hardcoded ports/URLs/hostnames
check_pattern '["\047](https?://|localhost|127\.0\.0\.1|0\.0\.0\.0)["\047]' "Hardcoded URLs and localhost references" "."

# Hardcoded ports
check_pattern ':[0-9]{2,5}(?![0-9])' "Hardcoded port numbers" "."

# Hardcoded timeouts (seconds/milliseconds)
check_pattern 'timeout[^=]*=[ \t]*[0-9]+' "Hardcoded timeout values" "."

# Hardcoded file paths
check_pattern '["\047]/.+["\047]' "Hardcoded absolute file paths" "."

# Hardcoded versions in templates
check_pattern '"version":\s*"[0-9]+\.[0-9]+\.[0-9]+"' "Hardcoded versions in JSON" "templates/"

# Hardcoded database/service names
check_pattern '["\047](postgresql://|mongodb://|mysql://)[^"\047]*["\047]' "Hardcoded connection strings" "."

# Hardcoded log levels
check_pattern 'level["\047\s]*=["\047\s]*(DEBUG|INFO|WARN|ERROR)["\047\s]*' "Hardcoded log levels" "."

# Magic numbers (common dangerous values)
check_pattern '\b(5000|8080|3000|5432|27017|6379)\b' "Common port numbers as magic values" "."

# Hardcoded retry counts/delays
check_pattern '(max_attempts|max_retries|retry_count)[^=]*=[ \t]*[0-9]+' "Hardcoded retry parameters" "."

# Hardcoded buffer/cache sizes
check_pattern '(buffer_size|cache_size|max_size)[^=]*=[ \t]*[0-9]+' "Hardcoded buffer/cache sizes" "."

# FORBIDDEN AI SIGNATURES
check_pattern 'Generated with.*Claude Code|Co-Authored-By.*Claude|Generated by Claude|Created with Claude Code|Claude AI assistance|AI-generated code' "Forbidden AI attribution signatures" "."

echo
if [ $ISSUES_FOUND -eq 0 ]; then
    echo -e "${GREEN}üéâ No hardcoded values found!${NC}"
else
    echo -e "${RED}‚ö†Ô∏è  Found $ISSUES_FOUND categories of hardcoded values${NC}"
    echo "Review the output above and fix critical issues."
    exit 1
fi
