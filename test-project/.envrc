# Project Development Environment
# Automatically loads when entering the directory (requires direnv)

# Set project environment variables (generic for any project)
export PROJECT_NAME="test-project"
export PROJECT_MODE="development"
export ENV="development"  # Required by Genesis core
export SERVICE="test-project"
export AI_MAX_FILES=30
export AI_SAFETY_MODE="enforced"
export LOG_LEVEL="info"
export LOG_JSON="false"
export LOG_TIMESTAMP="true"
export LOG_CALLER="false"

# Development tool versions
export PYTHON_VERSION="3.11"
export NODE_VERSION="20"

# Project paths (auto-detected based on project structure)
export PROJECT_ROOT="$(pwd)"

# Auto-detect project type and set paths accordingly
if [[ -f "pyproject.toml" ]] && [[ -d "src" ]]; then
  # Python project with src layout
  export PROJECT_TYPE="python-package"
  export SRC_DIR="${PROJECT_ROOT}/src"
  export DIST_DIR="${PROJECT_ROOT}/dist"
  echo "📦 Detected: Python Package Project (test-project)"
elif [[ -f "pyproject.toml" ]]; then
  # Simple Python project
  export PROJECT_TYPE="python-simple"
  export SRC_DIR="${PROJECT_ROOT}"
  echo "📦 Detected: Simple Python Project (test-project)"
else
  # Generic project - minimal assumptions
  export PROJECT_TYPE="generic"
  export SRC_DIR="${PROJECT_ROOT}/src"
  echo "📦 Detected: Generic Project (test-project)"
fi

# Tool configuration
export COVERAGE_FILE="${PROJECT_ROOT}/.coverage"

# Circuit breaker configuration
export CB_FAILURE_THRESHOLD="5"
export CB_TIMEOUT="60.0"
export CB_HALF_OPEN_MAX_CALLS="5"
export CB_SUCCESS_THRESHOLD="1"
export CB_SLIDING_WINDOW_SIZE="10"

# Retry configuration
export RETRY_MAX_ATTEMPTS="3"
export RETRY_INITIAL_DELAY="1.0"
export RETRY_MAX_DELAY="60.0"
export RETRY_EXPONENTIAL_BASE="2.0"

# AutoFix configuration
export AUTOFIX_MAX_ITERATIONS="3"
export AUTOFIX_MAX_RUNS="5"

# Genesis file limits (required by Genesis CLI)
export AI_MAX_FILES="30"
export MAX_PROJECT_FILES="1000"
export AI_MAX_FILES="30"

# AI Safety reminders (works for any project)
echo "🔒 AI Safety: Max ${AI_MAX_FILES} files per worktree"

# Get accurate file count using git (respects .gitignore)
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  file_count=$(git ls-files --cached --others --exclude-standard | wc -l)
  echo "📁 test-project file count: ${file_count}"
else
  file_count=$(find . -type f | wc -l)
  echo "📁 test-project file count: ${file_count}"
fi

# Warn if too many files
if [ "$file_count" -gt 100 ]; then
  echo "⚠️  WARNING: ${file_count} files detected - consider using sparse worktree"
fi

# Load local overrides if they exist
if [[ -f ".envrc.local" ]]; then
  source_env .envrc.local
fi
