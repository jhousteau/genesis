# Project Development Environment
# Automatically loads when entering the directory (requires direnv)

# Set project environment variables (generic for any project)
export PROJECT_NAME="${PWD##*/}"  # Auto-detect from directory name
export PROJECT_MODE="development"
export AI_MAX_FILES=30
export AI_SAFETY_MODE="enforced"
export LOG_LEVEL="info"

# Development tool versions
export PYTHON_VERSION="3.11"
export NODE_VERSION="20"

# Project paths (auto-detected based on project structure)
export PROJECT_ROOT="$(pwd)"

# Auto-detect project type and set paths accordingly
if [[ -f "pyproject.toml" ]] && [[ -d "genesis" ]]; then
  # Genesis toolkit project
  export PROJECT_TYPE="genesis-toolkit"
  export TEMPLATES_DIR="${PROJECT_ROOT}/templates"
  export SHARED_PYTHON_DIR="${PROJECT_ROOT}/genesis"
  export CLI_DIR="${PROJECT_ROOT}/genesis"
  echo "üì¶ Detected: Genesis Toolkit Project"
elif [[ -f "package.json" ]] && [[ -d "src" ]]; then
  # TypeScript/Node project
  export PROJECT_TYPE="typescript-service"
  export SRC_DIR="${PROJECT_ROOT}/src"
  export DIST_DIR="${PROJECT_ROOT}/dist"
  echo "üì¶ Detected: TypeScript/Node Project"
elif [[ -f "pyproject.toml" ]] && [[ -d "src" ]]; then
  # Python project with src layout
  export PROJECT_TYPE="python-package"
  export SRC_DIR="${PROJECT_ROOT}/src"
  export DIST_DIR="${PROJECT_ROOT}/dist"
  echo "üì¶ Detected: Python Package Project"
elif [[ -f "pyproject.toml" ]]; then
  # Simple Python project
  export PROJECT_TYPE="python-simple"
  export SRC_DIR="${PROJECT_ROOT}"
  echo "üì¶ Detected: Simple Python Project"
else
  # Generic project - minimal assumptions
  export PROJECT_TYPE="generic"
  export SRC_DIR="${PROJECT_ROOT}/src"
  echo "üì¶ Detected: Generic Project"
fi

# Tool configuration
export PYTEST_DISABLE_PLUGIN_AUTOLOAD=1
export COVERAGE_FILE="${PROJECT_ROOT}/.coverage"

# AI Safety reminders (works for any project)
echo "üîí AI Safety: Max ${AI_MAX_FILES} files per worktree"
echo "üìÅ ${PROJECT_NAME} file count: $(find . -type f | wc -l)"

# Warn if too many files
file_count=$(find . -type f | wc -l)
if [ "$file_count" -gt 100 ]; then
  echo "‚ö†Ô∏è  WARNING: ${file_count} files detected - consider using sparse worktree"
fi

# Load local overrides if they exist
if [[ -f ".envrc.local" ]]; then
  source_env .envrc.local
fi
