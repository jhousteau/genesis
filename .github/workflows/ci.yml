name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  file-safety-check:
    name: AI Safety File Count Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check file count for AI safety
        run: |
          count=$(find . -type f -not -path './.git/*' | wc -l)
          echo "Current file count: $count"
          if [ $count -gt 100 ]; then
            echo "❌ Too many files ($count) for AI safety (limit: 100)"
            exit 1
          fi
          echo "✓ File count within AI safety limits"

  component-validation:
    name: Component Structure Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate component structure
        run: |
          if [ -f "./validate-components.sh" ]; then
            chmod +x ./validate-components.sh
            ./validate-components.sh
          else
            echo "⚠️  validate-components.sh not found, skipping validation"
          fi

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - uses: pre-commit/action@v3.0.1

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    if: hashFiles('pyproject.toml') != ''
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install dependencies
        run: poetry install
        
      - name: Run tests
        run: |
          poetry run pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  typescript-tests:
    name: TypeScript Tests
    runs-on: ubuntu-latest
    if: hashFiles('package.json') != ''
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test

  go-tests:
    name: Go Tests
    runs-on: ubuntu-latest
    if: hashFiles('go.mod') != ''
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Run tests
        run: go test ./...

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Python security scan
        if: hashFiles('pyproject.toml') != ''
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: |
          pip install safety
          safety check --json || true
        if: hashFiles('pyproject.toml') != ''
        
      - name: Node.js security scan
        if: hashFiles('package.json') != ''
        run: npm audit --audit-level moderate || true