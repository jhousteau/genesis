name: CI Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'genesis/**'
      - 'terraform/**'
      - 'templates/**'
      - 'smart-commit/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'Makefile'
  pull_request:
    branches: [main]
    paths:
      - 'genesis/**'
      - 'terraform/**'
      - 'templates/**'
      - 'smart-commit/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'Makefile'

jobs:
  file-safety-check:
    name: AI Safety File Count Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check file count for AI safety
        run: |
          count=$(find . -type f -not -path './.git/*' | wc -l)
          echo "Current file count: $count"
          if [ $count -gt 100 ]; then
            echo "❌ Too many files ($count) for AI safety (limit: 100)"
            exit 1
          fi
          echo "✓ File count within AI safety limits"

  component-validation:
    name: Component Structure Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate component structure
        run: |
          if [ -f "./scripts/validate-components.sh" ]; then
            chmod +x ./scripts/validate-components.sh
            ./scripts/validate-components.sh
          else
            echo "⚠️  validate-components.sh not found, skipping validation"
          fi

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - uses: pre-commit/action@v3.0.1

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    if: hashFiles('pyproject.toml') != ''
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: |
          poetry run pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  typescript-tests:
    name: TypeScript Tests
    runs-on: ubuntu-latest
    if: hashFiles('package.json') != ''
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Secret Detection
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_COMMENTS: false

      # SAST Analysis with CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-extended,security-and-quality

      - name: Autobuild for CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

      # Python Dependency Security
      - name: Python security scan
        if: hashFiles('pyproject.toml') != ''
        run: |
          pip install safety bandit
          echo "🔍 Running Safety (dependency vulnerabilities)..."
          timeout 120 safety scan --output json > safety-report.json 2>&1 || echo "Safety scan completed with warnings"
          echo "🔍 Running Bandit (SAST for Python)..."
          bandit -r . -f json -o bandit-report.json --configfile .bandit || echo "Bandit scan completed with findings"

          # Show summaries
          if [ -f safety-report.json ]; then
            echo "📊 Safety Report Summary:"
            python -c "
import json
try:
    with open('safety-report.json') as f:
        data = json.load(f)
        vulns = data.get('vulnerabilities', [])
        print(f'Vulnerabilities found: {len(vulns)}')
        if vulns:
            for v in vulns[:3]:  # Show first 3
                print(f'  - {v.get(\"package_name\", \"unknown\")}: {v.get(\"vulnerability_id\", \"unknown\")}')
except:
    print('Safety report parsing failed - check format')
            " || echo "Safety report analysis failed"
          fi

          if [ -f bandit-report.json ]; then
            echo "📊 Bandit Report Summary:"
            python -c "
import json
try:
    with open('bandit-report.json') as f:
        data = json.load(f)
        results = data.get('results', [])
        print(f'Issues found: {len(results)}')
        if results:
            confidence_levels = [r['issue_confidence'] for r in results]
            print(f'Confidence levels: {list(set(confidence_levels))}')
            severity_levels = [r['issue_severity'] for r in results]
            print(f'Severity levels: {list(set(severity_levels))}')
except:
    print('Bandit report parsing failed')
            " || echo "Bandit report analysis failed"
          fi

      # Node.js Security
      - name: Node.js security scan
        if: hashFiles('package.json') != ''
        run: |
          echo "🔍 Running npm audit..."
          npm audit --audit-level moderate --json > npm-audit.json || true
          if [ -f npm-audit.json ]; then
            echo "📊 NPM Audit Summary:"
            node -e "const data=require('./npm-audit.json'); console.log(\`Vulnerabilities: \${Object.keys(data.vulnerabilities || {}).length}\`);" || echo "No npm audit issues found"
          fi

      # Upload security artifacts
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            npm-audit.json
          retention-days: 30

      # Security Summary
      - name: Security Scan Summary
        if: always()
        run: |
          echo "## 🛡️ Security Scan Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scans Performed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secret detection (Gitleaks)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Static analysis (CodeQL)" >> $GITHUB_STEP_SUMMARY
          if [ -f safety-report.json ]; then
            echo "- ✅ Python dependency scan (Safety)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Python SAST scan (Bandit)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f npm-audit.json ]; then
            echo "- ✅ Node.js dependency scan (npm audit)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 Detailed reports available in security-reports artifact" >> $GITHUB_STEP_SUMMARY
