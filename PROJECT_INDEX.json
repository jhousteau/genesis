{"at":"2025-08-28T09:32:27.954866","root":".","tree":[".","\u251c\u2500\u2500 bootstrap/ (2 files)","\u2502   \u251c\u2500\u2500 src/ (1 files)","\u2502   \u251c\u2500\u2500 tests/ (1 files)","\u2502   \u2514\u2500\u2500 README.md","\u251c\u2500\u2500 genesis/ (15 files)","\u2502   \u251c\u2500\u2500 commands/ (2 files)","\u2502   \u251c\u2500\u2500 core/ (9 files)","\u2502   \u2502   \u251c\u2500\u2500 context/ (2 files)","\u2502   \u2502   \u2514\u2500\u2500 errors/ (2 files)","\u2502   \u2514\u2500\u2500 testing/ (2 files)","\u251c\u2500\u2500 old-bloated-code-read-only/ (29780 files)","\u2502   \u251c\u2500\u2500 agent-cage/ (4755 files)","\u2502   \u2502   \u251c\u2500\u2500 config/ (1 files)","\u2502   \u2502   \u2502   \u251c\u2500\u2500 environments/","\u2502   \u2502   \u2502   \u2514\u2500\u2500 README.md","\u2502   \u2502   \u251c\u2500\u2500 deploy/ (36 files)","\u2502   \u2502   \u2502   \u251c\u2500\u2500 local/ (15 files)","\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 commands/ (8 files)","\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 lib/ (6 files)"],"stats":{"total_files":37,"total_directories":36,"fully_parsed":{"shell":3,"python":28},"listed_only":{"json":5,"shell":1},"markdown_files":15},"f":{"bootstrap/sr/bootstrap.sh":["s",["log:0:():error_exit:","error_exit:0:():show_usage:","show_usage:0:()::","create_project:0:()::"]],"bootstrap/t/test_bootstrap.py":["p",{"TestBootstrapScript":["11",["test_script_exists_and_executable:14:(self)::Test that bootstrap script exists and is executable.","test_help_flag_works:20:(self)::Test that --help flag shows usage information.","test_insufficient_arguments_shows_usage:36:(self)::Test that insufficient arguments shows usage and exits with error.","test_python_api_project_creation:49:(self)::Test Python API project creation.","test_typescript_service_project_creation:79:(self)::Test TypeScript service project creation.","test_cli_tool_project_creation:106:(self)::Test CLI tool project creation.","test_git_initialization_works:131:(self)::Test that Git initialization works when not skipped.","test_unknown_option_fails:158:(self)::Test that unknown options cause script to fail.","test_script_syntax_validation:171:(self)::Test that the script has valid bash syntax.","test_line_count_meets_requirement:183:(self)::Test that script meets the ~150 line requirement.","test_makefile_content_valid:193:(self)::Test that generated Makefile has valid content.","test_gitignore_content_valid:219:(self)::Test that generated .gitignore has appropriate entries."]]}],"conftest.py":["p",["genesis_root:21:()>Path::Get Genesis project root directory.","temp_dir:28:()>Generator[Path, None, None]::Create temporary directory for test isolation.","mock_genesis_project:35:(temp_dir:Path)>Path::Create mock Genesis project structure for testing.","mock_git:58:()::Mock git operations to avoid actual git calls in tests.","mock_shell_commands:69:():mock_run:Mock shell command execution for testing scripts.","ai_safety_validator:89:():__init__,validate_component_isolation,validate_file_count:Fixture for validating AI safety constraints.","sample_project_files:134:(temp_dir:Path)>Path::Create sample project files for testing bootstrap functionality.","mock_worktree_environment:159:(temp_dir:Path, mock_git)::Create mock environment for testing worktree operations.","clean_environment:190:()::Clean up environment variables and state between tests.","capture_subprocess:205:():mock_run:Capture subprocess calls for verification in tests.","pytest_collection_modifyitems:222:(config, items)::Modify test items during collection.","pytest_configure:234:(config)::Configure pytest with custom settings.","pytest_runtest_setup:246:(item)::Setup before each test runs.","pytest_addoption:253:(parser)::Add custom command line options."]],"genesis/cli.py":["p",["find_genesis_root:19:()>Optional[Path]::Find Genesis project root by looking for CLAUDE.md.","get_component_path:27:(component:str)>Optional[Path]:find_genesis_root:Get path to a Genesis component.","cli:39:(ctx):find_genesis_root:Genesis - Development toolkit for lean, AI-safe projects.","bootstrap:54:(ctx, name:str, project_type:str, target_path:Optional[str], skip_git:bool)::Create new project with Genesis patterns and tooling.","worktree:67:(ctx, name:str, focus_path:str, max_files:int, verify:bool)::Create AI-safe sparse worktree with file limits.","commit:95:(ctx, message:Optional[str])::Smart commit with quality gates and pre-commit hooks.","clean:127:(ctx, worktrees:bool, artifacts:bool, clean_all:bool)::Clean workspace: remove old worktrees and build artifacts.","sync:202:(ctx)::Update shared components and dependencies.","status:236:(ctx, verbose:bool)::Check Genesis project health and component status."]],"genesis/commands/bootstrap.py":["p",["find_genesis_root:24:()>Optional[Path]::Find Genesis project root by looking for CLAUDE.md.","get_template_path:33:(project_type:str)>Optional[Path]:find_genesis_root:Get path to project template.","validate_project_name:43:(name:str)>None::Validate project name meets requirements.","create_project_directory:55:(project_path:Path)>None::Create project directory structure.","process_template_file:71:(template_file:Path, target_file:Path, substitutions:Dict[str, str])>None::Process a template file with substitutions.","copy_template_structure:96:(template_path:Path, project_path:Path, project_name:str)>None:process_template_file:Copy and process template structure.","initialize_git_repo:143:(project_path:Path, skip_git:bool)>None::Initialize Git repository in project.","bootstrap_project:189:(name:str, project_type:str = \"python-api\", target_path:Optional[str] = None, skip_git:bool = False)>Path:copy_template_structure,create_project_directory,get_template_path,initialize_git_repo,validate_project_name:Bootstrap a new project with Genesis patterns.","bootstrap_command:236:(name:str, project_type:str, target_path:Optional[str], skip_git:bool)>None:bootstrap_project:Bootstrap command implementation for CLI integration."]],"genesis/core/config.py":["p",["load_config:105:(file_path:Optional[Union[str, Path]] = None, env_prefix:str = \"\", defaults:Optional[dict[str, Any]] = None)>dict[str, Any]:get,load,load_config:"],{"ConfigLoader":["12",["__init__:15:(self, env_prefix:str = \"\")::","load_file:24:(self, file_path:Union[str, Path])>dict[str, Any]::Load configuration from YAML file.","load_env:42:(self, config:dict[str, Any])>dict[str, Any]::Apply environment variable overrides to config.","load:69:(self, file_path:Optional[Union[str, Path]] = None, defaults:Optional[dict[str, Any]] = None)>dict[str, Any]:load_env,load_file:","get:92:(self, key:str, default:Any = None)>Any:get:Get configuration value by key.","__getitem__:96:(self, key:str)>Any::Dictionary-style access to config values."]]}],"genesis/core/context/manager.py":["p",["get_context_manager:223:()>ContextManager::Get the global context manager instance.","get_context:235:()>Optional[RequestContext]:get_context_manager,get_current_context:Get the current request context.","set_context:240:(context:RequestContext)>None:get_context_manager,set_current_context:Set the current request context.","clear_context:245:()>None:clear_current_context,get_context_manager:Clear the current request context.","context_span:251:(context:RequestContext)>Generator[RequestContext, None, None]:context_scope,get_context_manager:Context manager for scoped context execution.","get_correlation_id:258:()>Optional[str]:get_context:Get current correlation ID.","set_correlation_id:266:(correlation_id:str)>None:get_context:Set current correlation ID.","get_request_id:275:()>Optional[str]:get_context:Get current request ID.","get_trace_id:283:()>Optional[str]:get_context:Get current trace ID.","get_user_id:291:()>Optional[str]:get_context:Get current user ID.","get_metadata:299:()>Dict[str, Any]:get_context:Get current metadata.","generate_correlation_id:308:()>str::Generate a new correlation ID.","generate_request_id:313:()>str::Generate a new request ID.","generate_trace_id:318:()>str::Generate a new trace ID.","generate_span_id:323:()>str::Generate a new span ID."],{"TraceContext":["28",["to_dict:36:(self)>Dict[str, Any]::Convert to dictionary for serialization.","create_child_span:45:(self)>\"TraceContext\":generate_span_id:Create a child span context."]],"RequestContext":["56",["to_dict:68:(self)>Dict[str, Any]:to_dict:Convert to dictionary for serialization.","get_logger_context:85:(self)>Dict[str, Any]::Get context data formatted for logger.","create_new:108:(cls, user_id:Optional[str] = None, metadata:Optional[Dict[str, Any]] = None,)>\"RequestContext\":generate_correlation_id,generate_request_id:Create a new request context with generated IDs.","with_trace:117:(self, trace_context:TraceContext)>\"RequestContext\"::Create a copy with trace context.","with_user:130:(self, user_id:str)>\"RequestContext\"::Create a copy with user ID."]],"ContextManager":["144",["__init__:151:(self, service_name:str = \"genesis\", environment:str = \"development\")::","get_current_context:155:(self)>Optional[RequestContext]::Get the current request context.","set_current_context:159:(self, context:RequestContext)>None::Set the current request context.","clear_current_context:172:(self)>None::Clear the current request context.","create_context:189:(self, correlation_id:Optional[str] = None, request_id:Optional[str] = None, user_id:Optional[str] = None, trace_context:Optional[TraceContext] = None, metadata:Optional[Dict[str, Any]] = None,)>RequestContext:generate_correlation_id,generate_request_id:Create a new request context.","context_scope:202:(self, context:RequestContext)>Generator[RequestContext, None, None]:clear_current_context,get_current_context,set_current_context:Context manager for scoped context execution."]]}],"genesis/core/errors/handler.py":["p",["get_error_handler:387:()>ErrorHandler::Get the global error handler instance.","handle_error:402:(error:Exception, context:Optional[ErrorContext] = None)>GenesisError:get_error_handler,handle:"],{"ErrorContext":["48",["to_dict:61:(self)>Dict[str, Any]::Convert context to dictionary for serialization.","create_default:76:(cls, service:Optional[str] = None, environment:Optional[str] = None)>\"ErrorContext\"::Create a default error context."]],"GenesisError":["87",["__init__:106:(self, message:str, code:str = \"GENESIS_ERROR\", category:ErrorCategory = ErrorCategory.UNKNOWN, severity:ErrorSeverity = ErrorSeverity.ERROR, context:Optional[ErrorContext] = None, cause:Optional[Exception] = None, details:Optional[Dict[str, Any]] = None, retry_after:Optional[int] = None, recoverable:bool = True,):__init__,_capture_stack_trace,_create_default_context:","_create_default_context:119:(self)>ErrorContext:create_default:Create default error context from environment.","_capture_stack_trace:127:(self)>List[str]::Capture current stack trace for debugging.","to_dict:131:(self)>Dict[str, Any]:to_dict:Convert error to dictionary for logging/serialization.","to_json:161:(self)>str:to_dict:Convert error to JSON string."]],"InfrastructureError":["167",["__init__:169:(self, message:str, **kwargs):__init__:"]],"NetworkError":["178",["__init__:180:(self, message:str, endpoint:Optional[str] = None, **kwargs):__init__:"]],"ValidationError":["193",["__init__:195:(self, message:str, field:Optional[str] = None, **kwargs):__init__:"]],"AuthenticationError":["209",["__init__:211:(self, message:str, **kwargs):__init__:"]],"AuthorizationError":["221",["__init__:223:(self, message:str, resource:Optional[str] = None, **kwargs):__init__:"]],"GenesisTimeoutError":["237",["__init__:239:(self, message:str, timeout_duration:Optional[float] = None, **kwargs):__init__:"]],"RateLimitError":["252",["__init__:254:(self, message:str, retry_after:Optional[int] = None, **kwargs):__init__:"]],"ExternalServiceError":["264",["__init__:266:(self, message:str, service_name:Optional[str] = None, **kwargs):__init__:"]],"ResourceError":["279",["__init__:281:(self, message:str, resource_type:Optional[str] = None, **kwargs):__init__:"]],"ErrorHandler":["294",["__init__:301:(self, service_name:str = \"genesis\", environment:str = \"development\")::","handle:310:(self, error:Exception, context:Optional[ErrorContext] = None)>GenesisError:_convert_to_genesis_error:","_convert_to_genesis_error:344:(self, error:Exception, context:Optional[ErrorContext] = None)>GenesisError:create_default:Convert standard exception to appropriate GenesisError subclass.","add_handler:378:(self, handler:Callable[[GenesisError], None])>None::Add a handler function to process errors."]]}],"genesis/core/health.py":["p",{"CheckResult":["21",[]],"HealthCheck":["31",["__init__:34:(self)::","add_check:37:(self, name:str, check_func:Callable[[], CheckResult])>None::","remove_check:46:(self, name:str)>None::Remove a health check by name.","run_check:50:(self, name:str)>CheckResult::Run a single health check by name.","run_all_checks:74:(self)>list[CheckResult]:run_check:Run all registered health checks.","get_overall_status:78:(self)>HealthStatus:run_all_checks:Get overall health status based on all checks.","get_summary:95:(self)>dict[str, Any]:get_overall_status,run_all_checks:Get health check summary."]]}],"genesis/core/logger.py":["p",["get_logger:62:(name:str, config:Optional[LogConfig] = None, handler:Optional[logging.Handler] = None)>logging.Logger:get_logger:"],{"LogConfig":["14",[]],"JSONFormatter":["23",["__init__:26:(self, config:LogConfig):__init__:","format:30:(self, record:logging.LogRecord)>str::"]]}],"genesis/core/retry.py":["p",["retry:78:(config:Optional[RetryConfig] = None)>Callable:_async_retry_wrapper,_sync_retry_wrapper,async_function,decorator,retry,unreliable_function:","_sync_retry_wrapper:107:(func:Callable, config:RetryConfig)>Callable:wrapper:","_async_retry_wrapper:134:(func:Callable, config:RetryConfig)>Callable:wrapper:","circuit_breaker:449:(config:Optional[CircuitBreakerConfig] = None)>Callable::Circuit breaker decorator factory.","resilient_call:459:(retry_config:Optional[RetryConfig] = None, circuit_config:Optional[CircuitBreakerConfig] = None)>Callable:database_call,decorator,external_api_call,resilient_call,retry:","resilient_external_service:499:(max_attempts:int = 3, failure_threshold:int = 5, timeout:float = 60.0, name:str = \"ExternalService\")>Callable:resilient_call,retry:","resilient_database:532:(max_attempts:int = 2, failure_threshold:int = 3, timeout:float = 30.0, name:str = \"Database\")>Callable:resilient_call,retry:"],{"RetryConfig":["68",[]],"CircuitBreakerError":["169",["__init__:172:(self, message:str, circuit_name:str = \"unknown\"):__init__:"]],"CircuitBreakerMetrics":["187",["success_rate:199:(self)>float::Calculate success rate as a percentage.","failure_rate:206:(self)>float::Calculate failure rate as a percentage."]],"CircuitBreakerConfig":["214",[]],"CircuitBreaker":["224",["__init__:235:(self, config:Optional[CircuitBreakerConfig] = None)::","state:263:(self)>CircuitBreakerState::Get current circuit breaker state.","metrics:269:(self)>CircuitBreakerMetrics:metrics:Get current metrics (thread-safe copy).","_should_attempt_reset:283:(self)>bool::Check if circuit should attempt to reset from OPEN to HALF_OPEN.","_transition_to_state:291:(self, new_state:CircuitBreakerState)>None::Transition to a new state.","_record_success:307:(self)>None:_transition_to_state:Record a successful call.","_record_failure:325:(self, exception:Exception)>None:_transition_to_state:Record a failed call.","_can_execute:348:(self)>bool:_should_attempt_reset,_transition_to_state:Check if a call can be executed.","call:368:(self, func:Callable[..., Any], *args, **kwargs)>Any:_can_execute,_record_failure,_record_success:Execute a function through the circuit breaker.","call_async:385:async (self, func:Callable[..., Any], *args, **kwargs)>Any:_can_execute,_record_failure,_record_success:Execute an async function through the circuit breaker.","decorator:402:(self, func:F)>F:async_wrapper,call,call_async,sync_wrapper:Decorator for wrapping functions with circuit breaker.","async_wrapper:406:async (*args, **kwargs):call_async:","sync_wrapper:411:(*args, **kwargs):call:","reset:415:(self)>None:_transition_to_state:Manually reset the circuit breaker to CLOSED state.","get_status:423:(self)>dict::Get detailed status information."]]}],"genesis/testing/ai_safety.py":["p",["count_files_in_directory:8:(directory:Path, include_hidden:bool = False, use_gitignore:bool = True)>int::Count files in directory, respecting gitignore patterns by default.","validate_ai_safety_limits:52:(directory:Path, max_files:int = 100, max_component_files:int = 30)>Dict[str, Any]:count_files_in_directory:Validate directory meets AI safety file count limits.","assert_file_count_safe:79:(directory:Path, max_files:int = 100, message:str = None):count_files_in_directory:Assert that directory has safe file count for AI.","assert_component_isolation:88:(component_path:Path, max_files:int = 30):count_files_in_directory:Assert that component meets isolation requirements.","get_file_count_report:100:(directory:Path)>Dict[str, Any]:count_files_in_directory,validate_ai_safety_limits:Generate detailed file count report for directory.","print_ai_safety_report:144:(directory:Path):get_file_count_report:Print human-readable AI safety report."],{"AISafetyChecker":["173",["__init__:176:(self, max_total_files:int = 100, max_component_files:int = 30)::","check_project:180:(self, project_path:Path)>Dict[str, Any]:validate_ai_safety_limits:Check entire project for AI safety.","check_component:188:(self, component_path:Path)>Dict[str, Any]:count_files_in_directory:Check single component for AI safety.","assert_project_safe:198:(self, project_path:Path):check_project:Assert project meets AI safety requirements.","assert_component_safe:204:(self, component_path:Path):check_component:Assert component meets AI safety requirements."]]}],"smart-commit/sr/smart-commit.sh":["s",["log:0:():error_exit:","error_exit:0:()::"]],"smart-commit/t/test_smart_commit.py":["p",{"TestSmartCommit":["11",["temp_git_repo:15:(self)::Create a temporary git repository for testing.","test_no_changes_to_commit:28:(self, temp_git_repo)::Test that script exits when no changes exist.","test_with_changes_but_no_precommit:42:(self, temp_git_repo)::Test smart-commit with changes but no pre-commit config.","test_secret_detection:70:(self, temp_git_repo)::Test that script detects potential secrets.","test_with_precommit_config:87:(self, temp_git_repo)::Test smart-commit with pre-commit configuration."]]}],"testing/fixtures/mock_commands.py":["p",["create_mock_shell_commands:76:()>MockCommandRunner:configure_command:Create mock command runner with common shell commands configured.","create_genesis_script_mocks:108:()>MockCommandRunner:configure_command:Create mock command runner configured for Genesis scripts.","patch_subprocess_run:165:():create_mock_shell_commands:Simple patch for subprocess.run with default success."],{"MockCommandRunner":["8",["__init__:11:(self)::","configure_command:22:(self, command:str, returncode:int = 0, stdout:str = \"\", stderr:str = \"\", side_effect:Optional[Exception] = None)::Configure response for a specific command.","mock_run:31:(self, cmd:Union[str, List[str]], **kwargs)::Mock subprocess.run with configurable responses.","was_called:59:(self, command_pattern:str)>bool::Check if a command matching pattern was called.","get_calls_matching:63:(self, command_pattern:str)>List[Dict[str, Any]]::Get all calls matching a command pattern.","get_call_count:67:(self, command_pattern:str)>int:get_calls_matching:Get count of calls matching pattern.","clear_history:71:(self)::Clear call history."]],"MockScriptEnvironment":["135",["__init__:138:(self):create_genesis_script_mocks:","set_env_var:143:(self, name:str, value:str)::Set environment variable.","set_working_dir:147:(self, path:str)::Set working directory.","run_script:151:(self, script_path:str, args:List[str] = None):mock_run:Mock running a script.","patch_all:157:(self)::Return context manager that patches subprocess and environment."]]}],"testing/fixtures/mock_filesystem.py":["p",["create_genesis_project_structure:88:(base_path:Path)>MockFilesystem:create_structure:Create a mock Genesis project structure.","create_test_project:158:(name:str = \"test-project\", project_type:str = \"python-api\")>MockFilesystem:create_structure:Create a test project structure."],{"MockFilesystem":["10",["__init__:13:(self, base_path:Optional[Path] = None)::","create_file:24:(self, relative_path:str, content:str = \"\")>Path::Create a file with given content.","create_directory:32:(self, relative_path:str)>Path::Create a directory.","create_structure:39:(self, structure:Dict[str, Any])>None:_create_structure_recursive:","_create_structure_recursive:55:(self, structure:Dict[str, Any], base:Path)>None:_create_structure_recursive,create_directory,create_file:Recursively create structure.","count_files:68:(self, pattern:str = \"*\")>int::Count files matching pattern.","list_files:72:(self, pattern:str = \"*\")>List[Path]::List files matching pattern.","cleanup:76:(self)>None::Clean up temporary directory if created.","__enter__:81:(self)::","__exit__:84:(self, exc_type, exc_val, exc_tb):cleanup:"]]}],"testing/fixtures/mock_git.py":["p",["create_mock_git:54:()>MockGit:configure_command:Create a configured mock git instance.","patch_git_operations:74:():create_mock_git:Decorator/context manager to patch git operations."],{"MockGit":["8",["__init__:11:(self)::","configure_command:16:(self, command:str, returncode:int = 0, stdout:str = \"\", stderr:str = \"\")::Configure response for a specific git command.","mock_run:24:(self, cmd, **kwargs)::Mock subprocess.run for git commands.","get_call_history:45:(self)::Get history of all git command calls.","was_called_with:49:(self, command:str)>bool::Check if a specific command was called."]]}],"testing/t/test_ai_safety.py":["p",{"TestAISafetyValidation":["13",["test_validate_file_limits_safe_project:16:(self, temp_dir)::Test validation of a safe project.","test_validate_file_limits_unsafe_project:27:(self, temp_dir)::Test validation of project exceeding limits.","test_component_isolation_validation:38:(self, temp_dir)::Test component isolation validation.","test_ai_safety_checker_class:53:(self, temp_dir)::Test AISafetyChecker class functionality.","test_file_count_safe_assertion:68:(self, temp_dir)::Test file count safety assertion.","test_genesis_project_ai_safety:82:(self, genesis_root)::Test that actual Genesis project meets AI safety limits.","test_exclude_patterns_working:104:(self, temp_dir)::Test that file counting excludes appropriate patterns.","test_component_structure_requirements:124:(self, temp_dir)::Test that components have required structure."]],"TestFileCountReporting":["142",["test_file_count_report_generation:145:(self, temp_dir)::Test generation of detailed file count reports.","test_print_ai_safety_report:168:(self, temp_dir, capsys)::Test printing of AI safety report."]]}],"testing/t/test_integration.py":["p",{"TestComponentIntegration":["15",["test_bootstrap_to_worktree_workflow:19:(self, temp_dir)::Test workflow: bootstrap project -> create worktree.","test_cli_status_with_all_components:58:(self, temp_dir)::Test CLI status command with all components present.","test_smart_commit_integration:88:(self, temp_dir)::Test smart commit integration with CLI.","test_shared_python_utilities_integration:110:(self, temp_dir)::Test that shared Python utilities work together.","test_component_script_discovery:133:(self, temp_dir)::Test that CLI can discover all component scripts."]],"TestEndToEndWorkflows":["152",["test_complete_development_workflow:156:(self, temp_dir)::Test complete workflow: bootstrap -> develop -> commit.","test_ai_safety_throughout_workflow:204:(self, temp_dir)::Test that AI safety is maintained throughout workflow."]],"TestErrorHandlingIntegration":["232",["test_cli_error_propagation:236:(self, temp_dir)::Test that errors from scripts propagate correctly through CLI.","test_missing_component_handling:259:(self, temp_dir)::Test handling of missing components.","test_invalid_project_detection:280:(self)::Test detection and handling of invalid project structures."]]}],"t/test_circuit_breaker.py":["p",{"TestCircuitBreakerConfig":["24",["test_default_config:27:(self)::Test default configuration values.","test_custom_config:37:(self)::Test custom configuration values."]],"TestCircuitBreakerMetrics":["55",["test_empty_metrics:58:(self)::Test metrics with no requests.","test_success_rate_calculation:64:(self)::Test success rate calculation.","test_all_successful:74:(self)::Test metrics with all successful requests.","test_all_failed:84:(self)::Test metrics with all failed requests."]],"TestCircuitBreakerError":["95",["test_default_error:98:(self)::Test default error creation.","test_error_with_circuit_name:105:(self)::Test error with circuit name."]],"TestCircuitBreaker":["113",["test_initial_state:116:(self)::Test circuit breaker starts in CLOSED state.","test_successful_call:122:(self):successful_function:Test successful function call.","successful_function:223:()::","test_failed_call:135:(self):failing_function:Test failed function call.","failing_function:311:()::","test_circuit_opens_after_failures:149:(self):failing_function:Test circuit opens after failure threshold is reached.","test_circuit_rejects_calls_when_open:168:(self):failing_function:Test circuit rejects calls when open.","test_circuit_half_open_after_timeout:186:(self):failing_function,successful_function:Test circuit transitions to HALF_OPEN after timeout.","test_circuit_closes_after_success_in_half_open:210:(self):failing_function,successful_function:Test circuit closes after successful calls in HALF_OPEN state.","test_circuit_reopens_on_failure_in_half_open:254:(self):failing_function:Test circuit reopens on failure while in HALF_OPEN state.","test_half_open_call_limit:276:(self):slow_function:Test HALF_OPEN state respects call limit.","slow_function:286:()::","test_reset_functionality:306:(self):failing_function:Test manual reset functionality.","test_get_status:324:(self)::Test status information retrieval.","test_thread_safety:335:(self):worker_failing,worker_successful:Test thread safety of circuit breaker.","worker_successful:341:()::","worker_failing:348:()::","test_async_calls:375:async (self):async_failing,async_successful:Test async function calls.","async_successful:379:async ()::","async_failing:382:async ()::"]],"TestCircuitBreakerDecorator":["394",["test_decorator_sync_function:397:(self):test_function:Test decorator with synchronous function.","test_function:450:()::","test_decorator_async_function:423:async (self):async_test_function:Test decorator with asynchronous function.","async_test_function:429:async (value)::","test_factory_decorator:445:(self):test_function:Test circuit_breaker factory decorator."]],"TestResilientIntegration":["462",["test_resilient_call_decorator:465:(self):test_function:Test resilient_call decorator combining retry and circuit breaker.","test_function:473:()::","test_resilient_external_service:495:(self):external_api:Test resilient_external_service convenience decorator.","external_api:500:()::","test_resilient_database:517:(self):database_query:Test resilient_database convenience decorator.","database_query:522:()::","test_resilient_call_async:540:async (self):async_function:Test resilient_call with async functions.","async_function:548:async ()::"]],"TestEdgeCases":["566",["test_zero_failure_threshold:569:(self):failing_function:Test behavior with zero failure threshold.","failing_function:574:()::","test_very_short_timeout:584:(self)::Test behavior with very short timeout.","test_large_sliding_window:600:(self)::Test behavior with large sliding window.","test_metrics_thread_safety:624:(self):worker:Test that metrics are thread-safe.","worker:628:()::"]]}],"t/test_context_management.py":["p",["clear_context_before_test:27:()::Ensure clean context state before each test."],{"TestTraceContext":["34",["test_trace_context_creation:37:(self)::Test creating trace context.","test_trace_context_to_dict:51:(self)::Test trace context serialization.","test_create_child_span:65:(self)::Test creating child span from trace context."]],"TestRequestContext":["81",["test_request_context_creation:84:(self)::Test creating request context.","test_request_context_to_dict:101:(self)::Test request context serialization.","test_request_context_logger_context:121:(self)::Test request context logger formatting.","test_create_new_context:144:(self)::Test creating new request context with generated IDs.","test_context_with_trace:158:(self)::Test adding trace context to request context.","test_context_with_user:169:(self)::Test adding user to request context."]],"TestContextManager":["180",["test_context_manager_creation:183:(self)::Test creating context manager.","test_get_set_clear_context:190:(self)::Test basic context operations.","test_create_context:207:(self)::Test creating context through manager.","test_context_scope:223:(self)::Test context scope manager.","test_context_scope_nesting:240:(self)::Test nested context scopes."]],"TestConvenienceFunctions":["264",["test_global_context_functions:267:(self)::Test global get/set/clear context functions.","test_context_span_function:284:(self)::Test context_span convenience function.","test_correlation_id_functions:296:(self)::Test correlation ID convenience functions."]],"TestIDGeneration":["314",["test_generate_correlation_id:317:(self)::Test correlation ID generation.","test_generate_request_id:329:(self)::Test request ID generation."]],"TestThreadSafety":["342",["test_context_isolation_between_threads:345:(self):thread_function:Test that contexts are isolated between threads.","thread_function:380:(thread_id:str)::","test_correlation_id_thread_safety:376:(self):thread_function:Test correlation ID thread safety."]],"TestAsyncSupport":["399",["test_async_context_isolation:403:async (self):async_function:Test that contexts work properly with async/await.","async_function:405:async (user_id:str)>str::","test_async_context_span:431:async (self)::Test context span with async operations."]],"TestContextIntegration":["446",["test_context_with_error_framework_integration:449:(self)::Test that context can be used with error framework.","test_context_metadata_handling:471:(self)::Test context metadata functionality."]]}],"t/test_error_framework.py":["p",{"TestErrorContext":["29",["test_create_default_context:32:(self)::Test creating default error context.","test_context_to_dict:42:(self)::Test error context serialization.","test_context_with_metadata:53:(self)::Test error context with metadata."]],"TestGenesisError":["66",["test_basic_genesis_error:69:(self)::Test basic GenesisError creation.","test_genesis_error_with_all_params:81:(self)::Test GenesisError with all parameters.","test_genesis_error_serialization:109:(self)::Test GenesisError to_dict serialization.","test_genesis_error_json_serialization:129:(self)::Test GenesisError JSON serialization.","test_stack_trace_inclusion:138:(self)::Test stack trace inclusion based on severity."]],"TestSpecificErrorTypes":["151",["test_infrastructure_error:154:(self)::Test InfrastructureError.","test_network_error:162:(self)::Test NetworkError with endpoint.","test_validation_error:170:(self)::Test ValidationError with field.","test_authentication_error:179:(self)::Test AuthenticationError.","test_authorization_error:187:(self)::Test AuthorizationError with resource.","test_timeout_error:196:(self)::Test GenesisTimeoutError with duration.","test_rate_limit_error:204:(self)::Test RateLimitError with retry_after.","test_external_service_error:212:(self)::Test ExternalServiceError with service name.","test_resource_error:220:(self)::Test ResourceError with resource type."]],"TestErrorHandler":["229",["test_handle_genesis_error:232:(self)::Test handling existing GenesisError.","test_handle_standard_exception:242:(self)::Test converting standard exceptions to GenesisError.","test_handle_connection_error:254:(self)::Test NetworkError conversion from ConnectionError.","test_handle_timeout_error:265:(self)::Test GenesisTimeoutError conversion.","test_handle_permission_error:276:(self)::Test AuthorizationError conversion from PermissionError.","test_handle_file_not_found_error:287:(self)::Test ResourceError conversion from FileNotFoundError.","test_handle_unknown_error:298:(self)::Test handling unknown error types.","test_error_handler_with_context:309:(self)::Test error handling with provided context.","test_error_handler_callbacks:321:(self):error_callback:Test error handler callbacks.","error_callback:327:(error:GenesisError)::"]],"TestErrorHandlingConvenience":["341",["test_handle_error_function:344:(self)::Test global handle_error function.","test_handle_error_with_context:352:(self)::Test handle_error with context.","test_global_error_handler_singleton:361:(self)::Test that get_error_handler returns singleton."]],"TestErrorCategoriesAndSeverities":["369",["test_all_error_categories:372:(self)::Test all error categories are defined.","test_all_error_severities:386:(self)::Test all error severities are defined.","test_error_hierarchy:394:(self)::Test that all custom errors inherit from GenesisError."]]}],"worktree-tools/sr/create-sparse-worktree.sh":["s",["show_usage:0:()::"]],"worktree-tools/t/test_sparse_worktree.py":["p",{"TestSparseWorktreeCreator":["12",["temp_git_repo:16:(self)::Create a temporary git repository for testing.","test_script_exists_and_executable:42:(self)::Test that the sparse worktree script exists and is executable.","test_help_flag_works:49:(self)::Test that --help flag shows usage information.","test_insufficient_arguments_shows_usage:65:(self)::Test that insufficient arguments shows usage and exits with error.","test_nonexistent_focus_path_fails:78:(self, temp_git_repo)::Test that script fails when focus path doesn't exist.","test_basic_worktree_creation_with_file:91:(self, temp_git_repo)::Test basic worktree creation focusing on a single file.","test_basic_worktree_creation_with_directory:116:(self, temp_git_repo)::Test basic worktree creation focusing on a directory.","test_max_files_option:138:(self, temp_git_repo)::Test --max-files option works correctly.","test_verify_option:159:(self, temp_git_repo)::Test --verify option performs safety checks.","test_invalid_max_files_value:180:(self, temp_git_repo)::Test that invalid max-files values are rejected.","test_unknown_option_fails:194:(self, temp_git_repo)::Test that unknown options cause script to fail with usage.","test_script_syntax_validation:209:(self)::Test that the script has valid bash syntax.","test_line_count_meets_requirement:221:(self)::Test that script meets the ~150 line requirement.","test_ai_safety_features_documented:231:(self)::Test that AI safety features are documented in the script.","test_color_output_functions:247:(self)::Test that color output is properly configured."]]}]},"g":[["GenesisTimeoutError.__init__","HealthCheck.__init__"],["AuthenticationError.__init__","MockGit.__init__"],["AuthenticationError.__init__","MockCommandRunner.__init__"],["TestCircuitBreakerDecorator.test_factory_decorator","TestCircuitBreakerDecorator.test_function"],["CircuitBreaker.sync_wrapper","CircuitBreaker.call"],["AuthenticationError.__init__","__init__"],["AuthorizationError.__init__","ConfigLoader.__init__"],["ExternalServiceError.__init__","CircuitBreakerError.__init__"],["_sync_retry_wrapper","wrapper"],["JSONFormatter.__init__","JSONFormatter.__init__"],["retry","_async_retry_wrapper"],["JSONFormatter.__init__","MockScriptEnvironment.__init__"],["CircuitBreakerError.__init__","ResourceError.__init__"],["ValidationError.__init__","ResourceError.__init__"],["ContextManager.create_context","generate_request_id"],["AuthenticationError.__init__","CircuitBreaker.__init__"],["TestThreadSafety.test_correlation_id_thread_safety","TestThreadSafety.thread_function"],["retry","TestAsyncSupport.async_function"],["TestCircuitBreaker.test_circuit_half_open_after_timeout","successful_function"],["InfrastructureError.__init__","ExternalServiceError.__init__"],["NetworkError.__init__","MockGit.__init__"],["ValidationError.__init__","ConfigLoader.__init__"],["CircuitBreaker._record_failure","_transition_to_state"],["ResourceError.__init__","ResourceError.__init__"],["NetworkError.__init__","MockCommandRunner.__init__"],["AuthorizationError.__init__","InfrastructureError.__init__"],["ai_safety_validator","GenesisTimeoutError.__init__"],["GenesisError.to_dict","RequestContext.to_dict"],["NetworkError.__init__","__init__"],["ai_safety_validator","AuthenticationError.__init__"],["ResourceError.__init__","ConfigLoader.__init__"],["InfrastructureError.__init__","CircuitBreakerError.__init__"],["ai_safety_validator","AISafetyChecker.__init__"],["RequestContext.to_dict","ErrorContext.to_dict"],["resilient_call","retry"],["create_mock_shell_commands","configure_command"],["MockFilesystem.__exit__","cleanup"],["load_config","load"],["TestCircuitBreakerDecorator.test_decorator_sync_function","TestCircuitBreakerDecorator.test_function"],["TestAsyncSupport.test_async_context_isolation","async_function"],["get_user_id","get_context"],["TestCircuitBreaker.test_circuit_half_open_after_timeout","TestCircuitBreaker.failing_function"],["AuthorizationError.__init__","ValidationError.__init__"],["handle_error","handle"],["NetworkError.__init__","CircuitBreaker.__init__"],["AuthorizationError.__init__","HealthCheck.__init__"],["TestResilientIntegration.test_resilient_call_decorator","TestCircuitBreakerDecorator.test_function"],["RateLimitError.__init__","JSONFormatter.__init__"],["AuthorizationError.__init__","MockFilesystem.__init__"],["ValidationError.__init__","InfrastructureError.__init__"],["patch_subprocess_run","create_mock_shell_commands"],["RateLimitError.__init__","MockScriptEnvironment.__init__"],["ExternalServiceError.__init__","MockGit.__init__"],["CircuitBreakerError.__init__","ContextManager.__init__"],["ExternalServiceError.__init__","MockCommandRunner.__init__"],["CircuitBreaker._can_execute","CircuitBreaker._transition_to_state"],["handle_error","get_error_handler"],["create_mock_git","configure_command"],["ExternalServiceError.__init__","__init__"],["context_span","get_context_manager"],["GenesisTimeoutError.__init__","MockCommandRunner.__init__"],["GenesisTimeoutError.__init__","MockGit.__init__"],["context_span","context_scope"],["JSONFormatter.__init__","GenesisError.__init__"],["GenesisTimeoutError.__init__","__init__"],["TestCircuitBreakerDecorator.test_factory_decorator","TestResilientIntegration.test_function"],["ai_safety_validator","MockScriptEnvironment.__init__"],["CircuitBreakerError.__init__","ValidationError.__init__"],["create_test_project","MockFilesystem.create_structure"],["CircuitBreakerError.__init__","HealthCheck.__init__"],["MockFilesystem.__exit__","MockFilesystem.cleanup"],["TraceContext.create_child_span","generate_span_id"],["create_test_project","create_structure"],["JSONFormatter.__init__","ErrorHandler.__init__"],["GenesisError.to_json","RequestContext.to_dict"],["retry","_sync_retry_wrapper"],["ValidationError.__init__","ValidationError.__init__"],["ResourceError.__init__","ContextManager.__init__"],["AuthenticationError.__init__","ResourceError.__init__"],["ValidationError.__init__","HealthCheck.__init__"],["GenesisError.to_json","TraceContext.to_dict"],["ValidationError.__init__","MockFilesystem.__init__"],["GenesisError.to_json","to_dict"],["ExternalServiceError.__init__","CircuitBreaker.__init__"],["resilient_call","decorator"],["GenesisTimeoutError.__init__","CircuitBreaker.__init__"],["ResourceError.__init__","ValidationError.__init__"],["AuthenticationError.__init__","ConfigLoader.__init__"],["GenesisError.to_dict","ErrorContext.to_dict"],["MockScriptEnvironment.run_script","MockCommandRunner.mock_run"],["ResourceError.__init__","HealthCheck.__init__"],["CircuitBreaker.call_async","_record_success"],["ai_safety_validator","AuthorizationError.__init__"],["CircuitBreaker._record_success","_transition_to_state"],["bootstrap_project","copy_template_structure"],["retry","decorator"],["MockFilesystem.create_structure","MockFilesystem._create_structure_recursive"],["TestCircuitBreaker.test_thread_safety","TestCircuitBreaker.worker_successful"],["get_component_path","find_genesis_root"],["InfrastructureError.__init__","JSONFormatter.__init__"],["TestCircuitBreaker.test_circuit_opens_after_failures","TestCircuitBreaker.failing_function"],["get_context","get_context_manager"],["NetworkError.__init__","ResourceError.__init__"],["CircuitBreaker.metrics","CircuitBreaker.metrics"],["ExternalServiceError.__init__","RateLimitError.__init__"],["RateLimitError.__init__","GenesisError.__init__"],["AuthenticationError.__init__","InfrastructureError.__init__"],["TestThreadSafety.test_context_isolation_between_threads","TestThreadSafety.thread_function"],["GenesisTimeoutError.__init__","RateLimitError.__init__"],["set_correlation_id","get_context"],["NetworkError.__init__","ConfigLoader.__init__"],["create_mock_shell_commands","MockGit.configure_command"],["ContextManager.context_scope","ContextManager.set_current_context"],["ErrorHandler._convert_to_genesis_error","create_default"],["CircuitBreaker.call_async","CircuitBreaker._record_failure"],["ContextManager.create_context","generate_correlation_id"],["ai_safety_validator","GenesisError.__init__"],["RateLimitError.__init__","ErrorHandler.__init__"],["TestEdgeCases.test_metrics_thread_safety","TestEdgeCases.worker"],["AuthorizationError.__init__","GenesisTimeoutError.__init__"],["RequestContext.to_dict","GenesisError.to_dict"],["AuthorizationError.__init__","AuthenticationError.__init__"],["load_config","get"],["GenesisTimeoutError.__init__","AuthorizationError.__init__"],["ai_safety_validator","NetworkError.__init__"],["GenesisError.to_json","ErrorContext.to_dict"],["get_logger","get_logger"],["GenesisError.__init__","JSONFormatter.__init__"],["create_mock_git","MockGit.configure_command"],["AuthenticationError.__init__","ValidationError.__init__"],["AuthorizationError.__init__","AISafetyChecker.__init__"],["GenesisError.__init__","MockScriptEnvironment.__init__"],["CircuitBreakerError.__init__","MockCommandRunner.__init__"],["MockFilesystem._create_structure_recursive","MockFilesystem.create_directory"],["CircuitBreakerError.__init__","MockGit.__init__"],["AuthenticationError.__init__","HealthCheck.__init__"],["ExternalServiceError.__init__","ResourceError.__init__"],["JSONFormatter.__init__","ExternalServiceError.__init__"],["CircuitBreakerError.__init__","__init__"],["AuthenticationError.__init__","MockFilesystem.__init__"],["CircuitBreakerError.__init__","GenesisTimeoutError.__init__"],["HealthCheck.get_overall_status","HealthCheck.run_all_checks"],["MockFilesystem._create_structure_recursive","MockFilesystem.create_file"],["TestResilientIntegration.test_resilient_database","TestResilientIntegration.database_query"],["NetworkError.__init__","InfrastructureError.__init__"],["set_context","set_current_context"],["ExternalServiceError.__init__","ConfigLoader.__init__"],["ai_safety_validator","validate_file_count"],["ValidationError.__init__","GenesisTimeoutError.__init__"],["ai_safety_validator","validate_component_isolation"],["GenesisTimeoutError.__init__","ConfigLoader.__init__"],["JSONFormatter.__init__","CircuitBreakerError.__init__"],["ValidationError.__init__","AuthenticationError.__init__"],["ResourceError.__init__","MockCommandRunner.__init__"],["patch_git_operations","create_mock_git"],["TestCircuitBreakerDecorator.test_decorator_async_function","async_test_function"],["MockFilesystem._create_structure_recursive","MockFilesystem._create_structure_recursive"],["CircuitBreakerError.__init__","CircuitBreaker.__init__"],["AuthorizationError.__init__","MockScriptEnvironment.__init__"],["ResourceError.__init__","GenesisTimeoutError.__init__"],["ValidationError.__init__","AISafetyChecker.__init__"],["ResourceError.__init__","AuthenticationError.__init__"],["NetworkError.__init__","ValidationError.__init__"],["TestResilientIntegration.test_resilient_external_service","external_api"],["GenesisTimeoutError.__init__","NetworkError.__init__"],["NetworkError.__init__","HealthCheck.__init__"],["GenesisError.to_dict","GenesisError.to_dict"],["NetworkError.__init__","MockFilesystem.__init__"],["ResourceError.__init__","AISafetyChecker.__init__"],["TestResilientIntegration.test_resilient_call_async","async_function"],["InfrastructureError.__init__","ResourceError.__init__"],["ExternalServiceError.__init__","InfrastructureError.__init__"],["RateLimitError.__init__","ContextManager.__init__"],["create_genesis_script_mocks","MockCommandRunner.configure_command"],["GenesisTimeoutError.__init__","InfrastructureError.__init__"],["MockFilesystem._create_structure_recursive","create_directory"],["_async_retry_wrapper","wrapper"],["AuthorizationError.__init__","AuthorizationError.__init__"],["ValidationError.__init__","MockScriptEnvironment.__init__"],["get_correlation_id","get_context"],["mock_shell_commands","MockCommandRunner.mock_run"],["clear_context","ContextManager.clear_current_context"],["CircuitBreakerError.__init__","RateLimitError.__init__"],["CircuitBreaker.call","CircuitBreaker._can_execute"],["GenesisError.__init__","GenesisError.__init__"],["HealthCheck.run_all_checks","HealthCheck.run_check"],["ExternalServiceError.__init__","ValidationError.__init__"],["ai_safety_validator","ExternalServiceError.__init__"],["TestCircuitBreaker.test_failed_call","TestCircuitBreaker.failing_function"],["ExternalServiceError.__init__","HealthCheck.__init__"],["RequestContext.to_dict","TraceContext.to_dict"],["TestCircuitBreaker.test_circuit_reopens_on_failure_in_half_open","failing_function"],["resilient_call","external_api_call"],["GenesisError.__init__","ErrorHandler.__init__"],["RateLimitError.__init__","CircuitBreakerError.__init__"],["RequestContext.to_dict","to_dict"],["ExternalServiceError.__init__","MockFilesystem.__init__"],["HealthCheck.get_summary","HealthCheck.run_all_checks"],["TestCircuitBreaker.test_circuit_closes_after_success_in_half_open","TestEdgeCases.failing_function"],["CircuitBreakerError.__init__","AuthorizationError.__init__"],["resilient_call","database_call"],["GenesisTimeoutError.__init__","MockFilesystem.__init__"],["capture_subprocess","MockGit.mock_run"],["JSONFormatter.__init__","MockGit.__init__"],["ai_safety_validator","CircuitBreakerError.__init__"],["ResourceError.__init__","RateLimitError.__init__"],["JSONFormatter.__init__","__init__"],["AuthenticationError.__init__","GenesisTimeoutError.__init__"],["CircuitBreaker.reset","CircuitBreaker._transition_to_state"],["ValidationError.__init__","AuthorizationError.__init__"],["AuthenticationError.__init__","AuthenticationError.__init__"],["TestEdgeCases.test_zero_failure_threshold","TestCircuitBreaker.failing_function"],["GenesisError.to_json","GenesisError.to_dict"],["capture_subprocess","MockCommandRunner.mock_run"],["CircuitBreaker.sync_wrapper","call"],["TestCircuitBreaker.test_successful_call","TestCircuitBreaker.successful_function"],["AuthenticationError.__init__","AISafetyChecker.__init__"],["ResourceError.__init__","AuthorizationError.__init__"],["InfrastructureError.__init__","ContextManager.__init__"],["AuthorizationError.__init__","NetworkError.__init__"],["assert_component_isolation","count_files_in_directory"],["load_config","ConfigLoader.get"],["CircuitBreaker.call","_record_success"],["CircuitBreakerError.__init__","ConfigLoader.__init__"],["context_span","ContextManager.context_scope"],["retry","unreliable_function"],["resilient_database","retry"],["JSONFormatter.__init__","CircuitBreaker.__init__"],["TestCircuitBreaker.test_async_calls","async_failing"],["InfrastructureError.__init__","ValidationError.__init__"],["InfrastructureError.__init__","HealthCheck.__init__"],["set_context","get_context_manager"],["TestCircuitBreaker.test_thread_safety","worker_failing"],["NetworkError.__init__","GenesisTimeoutError.__init__"],["CircuitBreakerError.__init__","NetworkError.__init__"],["GenesisError.to_dict","TraceContext.to_dict"],["ValidationError.__init__","GenesisError.__init__"],["NetworkError.__init__","AuthenticationError.__init__"],["GenesisError.to_dict","to_dict"],["ErrorHandler.handle","ErrorHandler._convert_to_genesis_error"],["GenesisError.__init__","GenesisError._create_default_context"],["ValidationError.__init__","NetworkError.__init__"],["TestCircuitBreaker.test_reset_functionality","TestCircuitBreaker.failing_function"],["NetworkError.__init__","AISafetyChecker.__init__"],["CircuitBreaker.call","_record_failure"],["CircuitBreaker.call","_can_execute"],["CircuitBreakerError.__init__","InfrastructureError.__init__"],["RateLimitError.__init__","MockGit.__init__"],["RateLimitError.__init__","MockCommandRunner.__init__"],["GenesisError.__init__","ContextManager.__init__"],["TestCircuitBreaker.test_circuit_reopens_on_failure_in_half_open","TestCircuitBreaker.failing_function"],["CircuitBreaker._record_failure","CircuitBreaker._transition_to_state"],["CircuitBreaker.call","CircuitBreaker._record_failure"],["AuthenticationError.__init__","RateLimitError.__init__"],["RateLimitError.__init__","__init__"],["ResourceError.__init__","NetworkError.__init__"],["CircuitBreaker.call_async","CircuitBreaker._can_execute"],["TestThreadSafety.test_correlation_id_thread_safety","thread_function"],["GenesisError.__init__","ExternalServiceError.__init__"],["ai_safety_validator","JSONFormatter.__init__"],["TestResilientIntegration.test_resilient_call_async","TestResilientIntegration.async_function"],["AuthenticationError.__init__","AuthorizationError.__init__"],["resilient_database","resilient_call"],["ResourceError.__init__","InfrastructureError.__init__"],["GenesisError.__init__","_create_default_context"],["ExternalServiceError.__init__","GenesisTimeoutError.__init__"],["ExternalServiceError.__init__","AuthenticationError.__init__"],["GenesisTimeoutError.__init__","GenesisTimeoutError.__init__"],["GenesisTimeoutError.__init__","AuthenticationError.__init__"],["AISafetyChecker.assert_project_safe","check_project"],["GenesisError.__init__","CircuitBreakerError.__init__"],["TestCircuitBreaker.test_thread_safety","TestCircuitBreaker.worker_failing"],["RateLimitError.__init__","CircuitBreaker.__init__"],["CircuitBreakerError.__init__","MockFilesystem.__init__"],["ExternalServiceError.__init__","AISafetyChecker.__init__"],["get_trace_id","get_context"],["MockScriptEnvironment.run_script","MockGit.mock_run"],["GenesisTimeoutError.__init__","AISafetyChecker.__init__"],["JSONFormatter.__init__","ResourceError.__init__"],["CircuitBreaker.decorator","async_wrapper"],["clear_context","get_context_manager"],["validate_ai_safety_limits","count_files_in_directory"],["NetworkError.__init__","RateLimitError.__init__"],["AuthorizationError.__init__","ExternalServiceError.__init__"],["JSONFormatter.__init__","ConfigLoader.__init__"],["set_context","ContextManager.set_current_context"],["ResourceError.__init__","MockFilesystem.__init__"],["AISafetyChecker.assert_project_safe","AISafetyChecker.check_project"],["InfrastructureError.__init__","MockGit.__init__"],["clear_context","clear_current_context"],["InfrastructureError.__init__","MockCommandRunner.__init__"],["NetworkError.__init__","AuthorizationError.__init__"],["TestCircuitBreaker.test_reset_functionality","TestEdgeCases.failing_function"],["InfrastructureError.__init__","__init__"],["resilient_external_service","retry"],["ExternalServiceError.__init__","MockScriptEnvironment.__init__"],["TestCircuitBreaker.test_circuit_half_open_after_timeout","TestEdgeCases.failing_function"],["log","error_exit"],["AuthenticationError.__init__","NetworkError.__init__"],["GenesisTimeoutError.__init__","MockScriptEnvironment.__init__"],["AISafetyChecker.assert_component_safe","check_component"],["TestEdgeCases.test_metrics_thread_safety","worker"],["HealthCheck.get_overall_status","run_all_checks"],["TestCircuitBreaker.test_circuit_rejects_calls_when_open","failing_function"],["get_file_count_report","count_files_in_directory"],["ValidationError.__init__","ExternalServiceError.__init__"],["TestCircuitBreakerDecorator.test_decorator_sync_function","TestResilientIntegration.test_function"],["CircuitBreaker._record_success","CircuitBreaker._transition_to_state"],["load_config","ConfigLoader.load"],["CircuitBreaker.call_async","_record_failure"],["InfrastructureError.__init__","CircuitBreaker.__init__"],["CircuitBreaker.call_async","_can_execute"],["TestResilientIntegration.test_resilient_call_decorator","TestResilientIntegration.test_function"],["TestAsyncSupport.test_async_context_isolation","TestAsyncSupport.async_function"],["ValidationError.__init__","CircuitBreakerError.__init__"],["ExternalServiceError.__init__","AuthorizationError.__init__"],["GenesisError.__init__","MockGit.__init__"],["GenesisError.__init__","MockCommandRunner.__init__"],["ContextManager.context_scope","ContextManager.get_current_context"],["RequestContext.create_new","generate_request_id"],["JSONFormatter.__init__","ContextManager.__init__"],["RateLimitError.__init__","ResourceError.__init__"],["GenesisError.__init__","__init__"],["ai_safety_validator","ErrorHandler.__init__"],["NetworkError.__init__","NetworkError.__init__"],["get_template_path","find_genesis_root"],["JSONFormatter.__init__","ValidationError.__init__"],["RateLimitError.__init__","ConfigLoader.__init__"],["JSONFormatter.__init__","HealthCheck.__init__"],["resilient_external_service","resilient_call"],["ConfigLoader.load","load_env"],["CircuitBreakerError.__init__","AuthenticationError.__init__"],["TestCircuitBreaker.test_circuit_closes_after_success_in_half_open","TestCircuitBreaker.successful_function"],["TestThreadSafety.test_context_isolation_between_threads","thread_function"],["InfrastructureError.__init__","RateLimitError.__init__"],["bootstrap_command","bootstrap_project"],["GenesisError.__init__","CircuitBreaker.__init__"],["TestCircuitBreaker.test_circuit_opens_after_failures","TestEdgeCases.failing_function"],["CircuitBreakerError.__init__","AISafetyChecker.__init__"],["AuthorizationError.__init__","JSONFormatter.__init__"],["ExternalServiceError.__init__","GenesisError.__init__"],["TestCircuitBreaker.test_thread_safety","worker_successful"],["GenesisError._create_default_context","ErrorContext.create_default"],["InfrastructureError.__init__","AuthorizationError.__init__"],["GenesisTimeoutError.__init__","GenesisError.__init__"],["ExternalServiceError.__init__","NetworkError.__init__"],["ErrorHandler.handle","_convert_to_genesis_error"],["get_context","get_current_context"],["handle_error","ErrorHandler.handle"],["RateLimitError.__init__","InfrastructureError.__init__"],["TestCircuitBreaker.test_circuit_rejects_calls_when_open","TestCircuitBreaker.failing_function"],["TestCircuitBreakerDecorator.test_factory_decorator","test_function"],["HealthCheck.get_summary","get_overall_status"],["CircuitBreaker._can_execute","CircuitBreaker._should_attempt_reset"],["GenesisTimeoutError.__init__","ErrorHandler.__init__"],["capture_subprocess","mock_run"],["MockFilesystem.create_structure","_create_structure_recursive"],["TestCircuitBreaker.test_async_calls","async_successful"],["CircuitBreaker.call","CircuitBreaker._record_success"],["CircuitBreakerError.__init__","MockScriptEnvironment.__init__"],["mock_shell_commands","MockGit.mock_run"],["CircuitBreaker.decorator","CircuitBreaker.async_wrapper"],["ValidationError.__init__","JSONFormatter.__init__"],["InfrastructureError.__init__","ConfigLoader.__init__"],["ai_safety_validator","ContextManager.__init__"],["RateLimitError.__init__","ValidationError.__init__"],["RateLimitError.__init__","HealthCheck.__init__"],["retry","async_function"],["RateLimitError.__init__","MockFilesystem.__init__"],["ResourceError.__init__","JSONFormatter.__init__"],["ConfigLoader.load","load_file"],["ResourceError.__init__","MockScriptEnvironment.__init__"],["TestErrorHandler.test_error_handler_callbacks","error_callback"],["InfrastructureError.__init__","NetworkError.__init__"],["TestCircuitBreaker.test_async_calls","TestCircuitBreaker.async_successful"],["NetworkError.__init__","ExternalServiceError.__init__"],["ConfigLoader.get","get"],["ContextManager.context_scope","ContextManager.clear_current_context"],["CircuitBreaker.async_wrapper","call_async"],["JSONFormatter.__init__","MockCommandRunner.__init__"],["GenesisError.__init__","_capture_stack_trace"],["GenesisError.__init__","ResourceError.__init__"],["MockCommandRunner.get_call_count","MockCommandRunner.get_calls_matching"],["InfrastructureError.__init__","InfrastructureError.__init__"],["create_genesis_script_mocks","configure_command"],["JSONFormatter.__init__","GenesisTimeoutError.__init__"],["bootstrap_project","get_template_path"],["HealthCheck.get_summary","HealthCheck.get_overall_status"],["JSONFormatter.__init__","AuthenticationError.__init__"],["CircuitBreaker.decorator","CircuitBreaker.call"],["GenesisError.__init__","ConfigLoader.__init__"],["AuthorizationError.__init__","GenesisError.__init__"],["JSONFormatter.__init__","AISafetyChecker.__init__"],["AuthorizationError.__init__","ErrorHandler.__init__"],["error_exit","show_usage"],["MockFilesystem._create_structure_recursive","_create_structure_recursive"],["RequestContext.create_new","generate_correlation_id"],["ExternalServiceError.__init__","ExternalServiceError.__init__"],["TestCircuitBreaker.test_successful_call","successful_function"],["CircuitBreakerError.__init__","GenesisError.__init__"],["GenesisTimeoutError.__init__","ExternalServiceError.__init__"],["cli","find_genesis_root"],["ConfigLoader.load","ConfigLoader.load_file"],["TestResilientIntegration.test_resilient_database","database_query"],["InfrastructureError.__init__","MockFilesystem.__init__"],["AuthenticationError.__init__","JSONFormatter.__init__"],["CircuitBreakerError.__init__","ErrorHandler.__init__"],["bootstrap_project","initialize_git_repo"],["GenesisError.__init__","InfrastructureError.__init__"],["AuthenticationError.__init__","MockScriptEnvironment.__init__"],["TestResilientIntegration.test_resilient_call_async","TestAsyncSupport.async_function"],["GenesisTimeoutError.__init__","CircuitBreakerError.__init__"],["CircuitBreaker.call_async","CircuitBreaker._record_success"],["MockScriptEnvironment.run_script","mock_run"],["TestCircuitBreaker.test_failed_call","TestEdgeCases.failing_function"],["ValidationError.__init__","ErrorHandler.__init__"],["create_mock_shell_commands","MockCommandRunner.configure_command"],["TestCircuitBreaker.test_circuit_half_open_after_timeout","TestCircuitBreaker.successful_function"],["ResourceError.__init__","GenesisError.__init__"],["HealthCheck.run_all_checks","run_check"],["JSONFormatter.__init__","RateLimitError.__init__"],["ResourceError.__init__","ErrorHandler.__init__"],["RateLimitError.__init__","GenesisTimeoutError.__init__"],["ai_safety_validator","MockGit.__init__"],["get_file_count_report","validate_ai_safety_limits"],["RateLimitError.__init__","AuthenticationError.__init__"],["ai_safety_validator","MockCommandRunner.__init__"],["TestEdgeCases.test_zero_failure_threshold","TestEdgeCases.failing_function"],["GenesisError.__init__","ValidationError.__init__"],["AISafetyChecker.assert_component_safe","AISafetyChecker.check_component"],["ai_safety_validator","__init__"],["GenesisError.__init__","HealthCheck.__init__"],["create_mock_git","MockCommandRunner.configure_command"],["GenesisError.__init__","MockFilesystem.__init__"],["RateLimitError.__init__","AISafetyChecker.__init__"],["NetworkError.__init__","JSONFormatter.__init__"],["JSONFormatter.__init__","AuthorizationError.__init__"],["NetworkError.__init__","MockScriptEnvironment.__init__"],["CircuitBreaker._can_execute","_transition_to_state"],["print_ai_safety_report","get_file_count_report"],["AuthorizationError.__init__","ContextManager.__init__"],["CircuitBreaker.async_wrapper","CircuitBreaker.call_async"],["TestCircuitBreaker.test_circuit_opens_after_failures","failing_function"],["copy_template_structure","process_template_file"],["create_genesis_script_mocks","MockGit.configure_command"],["ai_safety_validator","CircuitBreaker.__init__"],["retry","TestResilientIntegration.async_function"],["bootstrap_project","validate_project_name"],["TestCircuitBreakerDecorator.test_decorator_async_function","TestCircuitBreakerDecorator.async_test_function"],["retry","retry"],["resilient_call","CircuitBreaker.decorator"],["TestCircuitBreaker.test_half_open_call_limit","slow_function"],["GenesisError._create_default_context","create_default"],["ConfigLoader.get","ConfigLoader.get"],["TestErrorHandler.test_error_handler_callbacks","TestErrorHandler.error_callback"],["AuthenticationError.__init__","GenesisError.__init__"],["AuthorizationError.__init__","CircuitBreakerError.__init__"],["ExternalServiceError.__init__","JSONFormatter.__init__"],["ValidationError.__init__","ContextManager.__init__"],["InfrastructureError.__init__","GenesisTimeoutError.__init__"],["get_request_id","get_context"],["GenesisTimeoutError.__init__","JSONFormatter.__init__"],["retry","CircuitBreaker.decorator"],["InfrastructureError.__init__","AuthenticationError.__init__"],["TestCircuitBreaker.test_circuit_reopens_on_failure_in_half_open","TestEdgeCases.failing_function"],["CircuitBreakerError.__init__","ExternalServiceError.__init__"],["AuthenticationError.__init__","ErrorHandler.__init__"],["RateLimitError.__init__","RateLimitError.__init__"],["ContextManager.context_scope","clear_current_context"],["JSONFormatter.__init__","NetworkError.__init__"],["CircuitBreaker.decorator","call_async"],["load_config","load_config"],["InfrastructureError.__init__","AISafetyChecker.__init__"],["ai_safety_validator","RateLimitError.__init__"],["CircuitBreakerError.__init__","CircuitBreakerError.__init__"],["RateLimitError.__init__","AuthorizationError.__init__"],["JSONFormatter.__init__","InfrastructureError.__init__"],["resilient_call","resilient_call"],["ResourceError.__init__","ExternalServiceError.__init__"],["TestCircuitBreaker.test_circuit_closes_after_success_in_half_open","failing_function"],["NetworkError.__init__","GenesisError.__init__"],["bootstrap_project","create_project_directory"],["ResourceError.__init__","CircuitBreakerError.__init__"],["get_metadata","get_context"],["GenesisError.__init__","GenesisTimeoutError.__init__"],["NetworkError.__init__","ErrorHandler.__init__"],["GenesisError.__init__","AuthenticationError.__init__"],["InfrastructureError.__init__","MockScriptEnvironment.__init__"],["ai_safety_validator","ResourceError.__init__"],["GenesisError.__init__","GenesisError._capture_stack_trace"],["JSONFormatter.__init__","MockFilesystem.__init__"],["GenesisError.__init__","AISafetyChecker.__init__"],["mock_shell_commands","mock_run"],["ai_safety_validator","ConfigLoader.__init__"],["AuthorizationError.__init__","MockGit.__init__"],["AuthorizationError.__init__","MockCommandRunner.__init__"],["RateLimitError.__init__","NetworkError.__init__"],["CircuitBreaker.metrics","metrics"],["AuthorizationError.__init__","__init__"],["ContextManager.context_scope","get_current_context"],["AuthenticationError.__init__","ContextManager.__init__"],["create_genesis_project_structure","MockFilesystem.create_structure"],["TestCircuitBreaker.test_circuit_closes_after_success_in_half_open","successful_function"],["create_genesis_project_structure","create_structure"],["HealthCheck.get_summary","run_all_checks"],["ExternalServiceError.__init__","ErrorHandler.__init__"],["AuthenticationError.__init__","ExternalServiceError.__init__"],["get_context","ContextManager.get_current_context"],["CircuitBreaker.decorator","CircuitBreaker.sync_wrapper"],["TestCircuitBreaker.test_failed_call","failing_function"],["ai_safety_validator","InfrastructureError.__init__"],["CircuitBreakerError.__init__","JSONFormatter.__init__"],["AuthorizationError.__init__","CircuitBreaker.__init__"],["AISafetyChecker.check_project","validate_ai_safety_limits"],["GenesisTimeoutError.__init__","ResourceError.__init__"],["ValidationError.__init__","MockGit.__init__"],["TestAsyncSupport.test_async_context_isolation","TestResilientIntegration.async_function"],["ValidationError.__init__","MockCommandRunner.__init__"],["ValidationError.__init__","__init__"],["AuthenticationError.__init__","CircuitBreakerError.__init__"],["GenesisError.__init__","RateLimitError.__init__"],["MockCommandRunner.get_call_count","get_calls_matching"],["TestCircuitBreaker.test_circuit_closes_after_success_in_half_open","TestCircuitBreaker.failing_function"],["CircuitBreaker.decorator","CircuitBreaker.call_async"],["MockFilesystem._create_structure_recursive","create_file"],["AISafetyChecker.check_component","count_files_in_directory"],["ResourceError.__init__","MockGit.__init__"],["TestEdgeCases.test_zero_failure_threshold","failing_function"],["CircuitBreaker.decorator","sync_wrapper"],["NetworkError.__init__","ContextManager.__init__"],["ResourceError.__init__","__init__"],["InfrastructureError.__init__","GenesisError.__init__"],["GenesisError.__init__","AuthorizationError.__init__"],["ai_safety_validator","ValidationError.__init__"],["MockScriptEnvironment.__init__","create_genesis_script_mocks"],["ai_safety_validator","HealthCheck.__init__"],["ai_safety_validator","MockFilesystem.__init__"],["InfrastructureError.__init__","ErrorHandler.__init__"],["ValidationError.__init__","CircuitBreaker.__init__"],["AuthorizationError.__init__","RateLimitError.__init__"],["CircuitBreaker._can_execute","_should_attempt_reset"],["ContextManager.context_scope","set_current_context"],["TestCircuitBreaker.test_half_open_call_limit","TestCircuitBreaker.slow_function"],["ConfigLoader.load","ConfigLoader.load_env"],["ResourceError.__init__","CircuitBreaker.__init__"],["NetworkError.__init__","CircuitBreakerError.__init__"],["TestCircuitBreakerDecorator.test_decorator_sync_function","test_function"],["TestCircuitBreaker.test_circuit_rejects_calls_when_open","TestEdgeCases.failing_function"],["TestCircuitBreaker.test_async_calls","TestCircuitBreaker.async_failing"],["TestResilientIntegration.test_resilient_call_decorator","test_function"],["ExternalServiceError.__init__","ContextManager.__init__"],["CircuitBreaker.reset","_transition_to_state"],["TestResilientIntegration.test_resilient_external_service","TestResilientIntegration.external_api"],["ErrorHandler._convert_to_genesis_error","ErrorContext.create_default"],["RateLimitError.__init__","ExternalServiceError.__init__"],["GenesisTimeoutError.__init__","ContextManager.__init__"],["CircuitBreaker.decorator","call"],["TestCircuitBreaker.test_reset_functionality","failing_function"],["RequestContext.to_dict","RequestContext.to_dict"],["assert_file_count_safe","count_files_in_directory"],["TestCircuitBreaker.test_circuit_half_open_after_timeout","failing_function"],["AuthorizationError.__init__","ResourceError.__init__"],["GenesisError.__init__","NetworkError.__init__"],["ValidationError.__init__","RateLimitError.__init__"],["GenesisTimeoutError.__init__","ValidationError.__init__"]],"d":{".solve/metrics/improvement_metrics_20250821_140225.md":["SOLVE Improvement Metrics Report","Executive Summary","Lesson Capture Metrics","By Source","By Category","By Impact Level","Template Evolution Metrics","By Template Type","Issue Reduction","Top Patterns"],"CLAUDE.md":["\u26a0\ufe0f CONTEXT MODE: BUILDING GENESIS \u26a0\ufe0f","Context Detection Rules","You're BUILDING Genesis if:","You're USING Genesis if:","Building vs Using Genesis","\ud83c\udfaf Core Building Principle: \"Build Generic, Use Everywhere\"","The Rule","Why This Matters","Examples of GOOD vs BAD","Apply This Rule To Everything"],"DIRECTORY_STRUCTURE_PLAN.md":["Genesis Directory Structure Plan - Optimized for Worktree Isolation","Core Design Principle: \"Eat Our Own Dog Food\"","Proposed Directory Structure","Sparse Worktree Strategy","Component Isolation Patterns","Result: ~25 files (CLI + needed libraries)","Result: ~10 files (completely independent)"],"EXTRACTION_PLAN.md":["Genesis Extraction & Build Plan","Overview","1. HARVEST: High-Value Components to Extract","\u2705 Smart Commit System","\u2705 Sparse Worktree Creator","\u2705 Bootstrap Core Logic","\u2705 Retry Utility","\u2705 Logger Utility","\u2705 Config Management","\u2705 Health Check Framework"],"GENESIS.md":["Genesis Architecture & Components","Core Architecture","Problem Solved","Directory Structure","Components","1. Genesis CLI (`genesis_cli/`)","2. Smart Commit (`shared-infra/smart-commit/`)","3. Bootstrap (`shared-infra/bootstrap/`)","Creates: structure, dependencies, configs, tests","4. Shared Libraries (`shared-infra/libs/`)"],"GENESIS_BUILD_PLAN.md":["FINAL COMPREHENSIVE GENESIS BUILD PLAN","Critical Success Factors","Phase 0: Foundation (Genesis Eating Its Own Dog Food)","0.1 Create CLAUDE.md with Clear Context Separation","\u26a0\ufe0f CONTEXT MODE: BUILDING GENESIS \u26a0\ufe0f","Context Detection Rules","Building vs Using Genesis","0.2 Environment Management Setup","0.3 Enhanced Ignore Files","Environment files"],"MIGRATION.md":["Genesis Migration Guide","Pre-Reorganization State (v1.0)","Current Architecture (v1.0)","Directory Structure","Current Packages","Current Features","Current Limitations","Planned Changes (v2.0)","New Architecture","Major Changes"],"OLD_CODE_ANALYSIS.md":["Deep Analysis of Old Bloated Code: Repetition, Over-Engineering, and Lessons Learned","Executive Summary","1. MASSIVE REPETITION PATTERNS IDENTIFIED","Smart Commit Systems (3 Versions, 1,874 lines total)","Deployment Scripts (Multiple Duplicates)","Docker Configuration (8 Dockerfiles)","Documentation Explosion","2. OVER-ENGINEERING EXAMPLES","Deployment Strategies Overkill (genesis-old/deploy/strategies/)","Security Theater (3,610 lines of validation scripts)"],"README.md":["Genesis","Quick Start","Clone and setup","Create your first workspace","Now you have 21 files instead of 3000+","What Genesis Does","Core Components","Installation","Install Genesis CLI","Verify installation"],"SAFETY.md":["Genesis Safety Guidelines","Core Safety Rules","Rule #1: AI Never Sees Main Repository","\u274c NEVER: Give AI access to main repo","AI sees 3000+ files \u2192 disaster waiting to happen","\u2705 ALWAYS: Use sparse worktree","AI sees 21 files \u2192 safe, focused work","Rule #2: 5-30 Files Per Worktree","Check file count before AI work","If > 30 files, narrow the sparse-checkout"],"bootstrap/README.md":["Bootstrap - Generic Project Initialization","Features","Usage","Create Python API project","Create TypeScript service with custom path","Create CLI tool without Git initialization","Get help","Project Templates","Python API (`python-api`)","TypeScript Service (`typescript-service`)"],"smart-commit/README.md":["Smart Commit System","Features","Usage","Run smart commit (interactive)","The script will guide you through:","1. Pre-commit checks (if configured)","2. Running tests (with continue option)","3. Code linting and auto-formatting","4. Secret scanning","5. Commit type selection"],"templates/README.md":["Genesis Project Templates","Available Templates","1. Python API (`python-api`)","2. CLI Tool (`cli-tool`) ","3. TypeScript Service (`typescript-service`)","Template Structure","Template Variables","Using Templates","Create Python API project","Create CLI tool"],"testing/README.md":["Testing Infrastructure - Comprehensive pytest Framework","Features","Contents","`fixtures/` - Test Fixtures and Mocks","`utilities/` - Test Helper Functions  ","`tests/` - Infrastructure Tests","Root Configuration","Usage Examples","Basic Component Testing","AI Safety Validation"],"worktree-tools/README.md":["Worktree Tools - AI-Safe Development Isolation","Features","Usage","Create AI-safe sparse worktree focused on specific file","Focus on directory with custom file limit","Create with safety verification","Get help","AI Safety Workflow","After creation, your worktree will contain:","Integration with Genesis Workflow"]},"deps":{"bootstrap/tests/test_bootstrap.py":["os","subprocess","tempfile","shutil","pathlib","pytest"],"conftest.py":["os","tempfile","shutil","pathlib","typing","pytest","subprocess","unittest.mock"],"genesis/cli.py":["os","shutil","subprocess","sys","pathlib","typing","click","genesis.commands.bootstrap"],"genesis/commands/bootstrap.py":["os","shutil","subprocess","sys","pathlib","typing","click"],"genesis/core/config.py":["os","pathlib","typing","yaml"],"genesis/core/context/manager.py":["os","uuid","contextlib","contextvars","dataclasses","datetime","typing"],"genesis/core/errors/handler.py":["json","traceback","uuid","dataclasses","datetime","enum","typing","os","os","os"],"genesis/core/health.py":["time","collections.abc","dataclasses","datetime","enum","typing"],"genesis/core/logger.py":["json","logging","sys","dataclasses","datetime","typing"],"genesis/core/retry.py":["asyncio","functools","inspect","random","threading","time","collections","collections.abc","dataclasses","enum","typing"],"genesis/testing/ai_safety.py":["pathlib","typing","subprocess"],"smart-commit/tests/test_smart_commit.py":["os","subprocess","tempfile","pathlib","unittest.mock","pytest"],"testing/fixtures/mock_commands.py":["unittest.mock","typing","subprocess"],"testing/fixtures/mock_filesystem.py":["tempfile","shutil","pathlib","typing","os"],"testing/fixtures/mock_git.py":["unittest.mock","typing","subprocess"],"testing/tests/test_ai_safety.py":["pytest","pathlib","testing.fixtures","genesis.testing.ai_safety","testing.utilities"],"testing/tests/test_integration.py":["pytest","subprocess","tempfile","pathlib","unittest.mock","testing.fixtures","sys","genesis","click.testing","sys","genesis","click.testing","sys","genesis","click.testing","sys","sys","genesis","click.testing","testing.utilities","sys","genesis","click.testing","sys","genesis","click.testing","sys","genesis","click.testing"],"tests/test_circuit_breaker.py":["asyncio","threading","time","unittest.mock","pytest","genesis.core.retry"],"tests/test_context_management.py":["pytest","threading","asyncio","datetime","unittest.mock","genesis.core.context","genesis.core.errors"],"tests/test_error_framework.py":["json","pytest","datetime","unittest.mock","genesis.core.errors"],"worktree-tools/tests/test_sparse_worktree.py":["os","subprocess","tempfile","shutil","pathlib","unittest.mock","pytest"]},"dir_purposes":{"templates/python-api":"API endpoints and route handlers","bootstrap/src":"Source code root directory","bootstrap/tests":"Test files and test utilities","genesis/testing":"Test files and test utilities","smart-commit/src":"Source code root directory","smart-commit/tests":"Test files and test utilities","testing":"Test files and test utilities","testing/fixtures":"Test fixtures and sample data","testing/tests":"Test files and test utilities","tests":"Test files and test utilities","worktree-tools/src":"Source code root directory","worktree-tools/tests":"Test files and test utilities"},"staleness":1755783150.306471}