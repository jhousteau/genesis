# Multi-stage Dockerfile template for Universal Platform projects

# Build stage
FROM {{BASE_IMAGE}} AS builder

# Set working directory
WORKDIR /app

# Copy dependency files
COPY {{DEPENDENCY_FILES}} ./

# Install dependencies
RUN {{INSTALL_DEPENDENCIES}}

# Copy application code
COPY . .

# Build application (if needed)
RUN {{BUILD_COMMAND}}

# Runtime stage
FROM {{RUNTIME_IMAGE}} AS runtime

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    tzdata \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy built application from builder
COPY --from=builder --chown=appuser:appuser /app {{COPY_PATH}} .

# Set environment variables
ENV PORT=8080 \
    LOG_LEVEL=info \
    NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD {{HEALTH_CHECK_COMMAND}}

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Run application
CMD [{{RUN_COMMAND}}]

# Template variables to be replaced:
# {{BASE_IMAGE}} - Base image for build stage (e.g., python:3.11, node:18)
# {{RUNTIME_IMAGE}} - Runtime image (e.g., python:3.11-slim, node:18-alpine)
# {{DEPENDENCY_FILES}} - Dependency files to copy (e.g., requirements.txt, package*.json)
# {{INSTALL_DEPENDENCIES}} - Command to install dependencies
# {{BUILD_COMMAND}} - Command to build the application (if needed)
# {{COPY_PATH}} - Path to copy from builder stage
# {{HEALTH_CHECK_COMMAND}} - Health check command
# {{RUN_COMMAND}} - Command to run the application
