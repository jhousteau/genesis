name: Deploy Web Application

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - stage
          - prod
      strategy:
        description: 'Deployment strategy'
        required: false
        default: 'rolling'
        type: choice
        options:
          - rolling
          - blue-green
          - canary

env:
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  REGISTRY_REGION: ${{ vars.REGISTRY_REGION || 'us-central1' }}
  
permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write
  deployments: write

jobs:
  # Environment determination
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      gcp_project: ${{ steps.env.outputs.gcp_project }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
      deployment_strategy: ${{ steps.env.outputs.deployment_strategy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deployment_strategy=${{ github.event.inputs.strategy }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "deployment_strategy=blue-green" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "deployment_strategy=rolling" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "deployment_strategy=rolling" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
          
          # Set GCP project based on environment
          case "${{ steps.env.outputs.environment }}" in
            dev) echo "gcp_project=${{ vars.PROJECT_NAME }}-dev" >> $GITHUB_OUTPUT ;;
            test) echo "gcp_project=${{ vars.PROJECT_NAME }}-test" >> $GITHUB_OUTPUT ;;
            stage) echo "gcp_project=${{ vars.PROJECT_NAME }}-stage" >> $GITHUB_OUTPUT ;;
            prod) echo "gcp_project=${{ vars.PROJECT_NAME }}-prod" >> $GITHUB_OUTPUT ;;
          esac

  # Code quality and security
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        if: contains(github.repository, 'node') || contains(github.repository, 'js') || contains(github.repository, 'ts')
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        if: contains(github.repository, 'python') || contains(github.repository, 'py')
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          if [[ -f "package.json" ]]; then
            npm ci
          elif [[ -f "requirements.txt" ]]; then
            pip install -r requirements.txt
          elif [[ -f "pyproject.toml" ]]; then
            pip install .
          fi

      - name: Run linting
        continue-on-error: true
        run: |
          if [[ -f "package.json" ]] && npm run lint --if-present; then
            echo "✅ JavaScript/TypeScript linting passed"
          elif [[ -f "pyproject.toml" ]] && python -m ruff check .; then
            echo "✅ Python linting passed"
          elif [[ -f "requirements.txt" ]] && python -m flake8 .; then
            echo "✅ Python linting passed"
          else
            echo "⚠️ No linting configuration found"
          fi

      - name: Run tests
        run: |
          if [[ -f "package.json" ]] && npm test --if-present; then
            echo "✅ Tests passed"
          elif [[ -f "pyproject.toml" ]] && python -m pytest; then
            echo "✅ Tests passed"
          elif [[ -f "requirements.txt" ]] && python -m pytest; then
            echo "✅ Tests passed"
          else
            echo "⚠️ No tests found"
          fi

      - name: Security scan - Secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: Security scan - Dependencies
        if: contains(github.repository, 'node') || contains(github.repository, 'js')
        run: npm audit --audit-level high

      - name: Security scan - Python dependencies
        if: contains(github.repository, 'python')
        run: |
          pip install safety
          safety check

  # Build and push container image
  build:
    needs: [setup, quality]
    if: needs.setup.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      image_url: ${{ steps.build.outputs.image_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ needs.setup.outputs.gcp_project }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker ${{ env.REGISTRY_REGION }}-docker.pkg.dev

      - name: Build and tag image
        id: build
        run: |
          IMAGE_TAG="${{ github.sha }}-$(date +%Y%m%d%H%M%S)"
          IMAGE_URL="${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ needs.setup.outputs.gcp_project }}/containers/${{ env.PROJECT_NAME }}"
          
          echo "Building image: ${IMAGE_URL}:${IMAGE_TAG}"
          
          # Build with build args
          docker build \
            --tag "${IMAGE_URL}:${IMAGE_TAG}" \
            --tag "${IMAGE_URL}:${{ needs.setup.outputs.environment }}" \
            --tag "${IMAGE_URL}:latest" \
            --build-arg ENV="${{ needs.setup.outputs.environment }}" \
            --build-arg VERSION="${IMAGE_TAG}" \
            --build-arg BUILD_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --build-arg VCS_REF="${{ github.sha }}" \
            .
            
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image_url=${IMAGE_URL}" >> $GITHUB_OUTPUT

      - name: Container security scan
        run: |
          # Install trivy
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
          
          # Scan image
          trivy image --severity HIGH,CRITICAL --format sarif --output trivy-results.sarif "${{ steps.build.outputs.image_url }}:${{ steps.build.outputs.image_tag }}"

      - name: Upload security scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

      - name: Push image
        run: |
          docker push "${{ steps.build.outputs.image_url }}:${{ steps.build.outputs.image_tag }}"
          docker push "${{ steps.build.outputs.image_url }}:${{ needs.setup.outputs.environment }}"
          docker push "${{ steps.build.outputs.image_url }}:latest"

  # Pre-deployment validation
  validate:
    needs: [setup, build]
    if: needs.setup.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ needs.setup.outputs.gcp_project }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Infrastructure validation
        run: |
          if [[ -f "main.tf" ]] || [[ -d "infrastructure" ]]; then
            echo "Running Terraform validation..."
            terraform init -backend=false
            terraform validate
            terraform fmt -check
          fi

      - name: Cost impact analysis
        run: |
          echo "Analyzing cost impact for ${{ needs.setup.outputs.environment }}"
          # In production, integrate with Cloud Billing API or Infracost
          echo "💰 Estimated monthly cost impact: \$X.XX"

      - name: Performance benchmark
        if: needs.setup.outputs.environment != 'prod'
        run: |
          echo "Running performance benchmarks..."
          # Run load tests or performance benchmarks
          echo "⚡ Performance metrics within acceptable range"

  # Deploy to Cloud Run
  deploy:
    needs: [setup, build, validate]
    if: needs.setup.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.deploy.outputs.service_url }}
    outputs:
      service_url: ${{ steps.deploy.outputs.service_url }}
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ needs.setup.outputs.gcp_project }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy infrastructure
        if: hashFiles('main.tf') != ''
        run: |
          echo "Deploying infrastructure..."
          terraform init -backend-config="bucket=${{ needs.setup.outputs.gcp_project }}-terraform-state"
          terraform plan \
            -var="project_id=${{ needs.setup.outputs.gcp_project }}" \
            -var="region=${{ env.REGISTRY_REGION }}" \
            -var="environment=${{ needs.setup.outputs.environment }}" \
            -var="image_tag=${{ needs.build.outputs.image_tag }}" \
            -out=tfplan
          terraform apply tfplan

      - name: Deploy application
        id: deploy
        run: |
          DEPLOYMENT_ID="${{ needs.setup.outputs.environment }}-$(date +%Y%m%d-%H%M%S)-${{ github.sha:0:7 }}"
          IMAGE_URL="${{ needs.build.outputs.image_url }}:${{ needs.build.outputs.image_tag }}"
          
          echo "Deploying ${{ env.PROJECT_NAME }} to ${{ needs.setup.outputs.environment }}"
          echo "Image: ${IMAGE_URL}"
          echo "Strategy: ${{ needs.setup.outputs.deployment_strategy }}"
          
          case "${{ needs.setup.outputs.deployment_strategy }}" in
            canary)
              # Deploy canary version with no traffic
              gcloud run deploy "${{ env.PROJECT_NAME }}" \
                --image="${IMAGE_URL}" \
                --region="${{ env.REGISTRY_REGION }}" \
                --project="${{ needs.setup.outputs.gcp_project }}" \
                --tag="canary-${DEPLOYMENT_ID}" \
                --no-traffic \
                --set-env-vars="ENV=${{ needs.setup.outputs.environment }},VERSION=${{ needs.build.outputs.image_tag }}"
              
              # Gradually shift traffic to canary
              gcloud run services update-traffic "${{ env.PROJECT_NAME }}" \
                --region="${{ env.REGISTRY_REGION }}" \
                --project="${{ needs.setup.outputs.gcp_project }}" \
                --to-tags="canary-${DEPLOYMENT_ID}=10"
              ;;
              
            blue-green)
              # Deploy new version with tag
              gcloud run deploy "${{ env.PROJECT_NAME }}" \
                --image="${IMAGE_URL}" \
                --region="${{ env.REGISTRY_REGION }}" \
                --project="${{ needs.setup.outputs.gcp_project }}" \
                --tag="green-${DEPLOYMENT_ID}" \
                --no-traffic \
                --set-env-vars="ENV=${{ needs.setup.outputs.environment }},VERSION=${{ needs.build.outputs.image_tag }}"
              
              # Health check before switching traffic
              sleep 30
              
              # Switch all traffic to new version
              gcloud run services update-traffic "${{ env.PROJECT_NAME }}" \
                --region="${{ env.REGISTRY_REGION }}" \
                --project="${{ needs.setup.outputs.gcp_project }}" \
                --to-tags="green-${DEPLOYMENT_ID}=100"
              ;;
              
            *)
              # Rolling deployment (default)
              gcloud run deploy "${{ env.PROJECT_NAME }}" \
                --image="${IMAGE_URL}" \
                --region="${{ env.REGISTRY_REGION }}" \
                --project="${{ needs.setup.outputs.gcp_project }}" \
                --allow-unauthenticated \
                --set-env-vars="ENV=${{ needs.setup.outputs.environment }},VERSION=${{ needs.build.outputs.image_tag }}"
              ;;
          esac
          
          # Get service URL
          SERVICE_URL=$(gcloud run services describe "${{ env.PROJECT_NAME }}" \
            --region="${{ env.REGISTRY_REGION }}" \
            --project="${{ needs.setup.outputs.gcp_project }}" \
            --format="value(status.url)")
          
          echo "service_url=${SERVICE_URL}" >> $GITHUB_OUTPUT
          echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
          
          echo "✅ Deployment successful!"
          echo "🔗 Service URL: ${SERVICE_URL}"

  # Post-deployment validation
  validate-deployment:
    needs: [setup, deploy]
    if: needs.setup.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Health check
        run: |
          echo "Performing health checks..."
          SERVICE_URL="${{ needs.deploy.outputs.service_url }}"
          
          # Wait for service to be ready
          for i in {1..30}; do
            if curl -f "${SERVICE_URL}/health" --max-time 10; then
              echo "✅ Health check passed"
              break
            fi
            
            if [[ $i -eq 30 ]]; then
              echo "❌ Health check failed after 30 attempts"
              exit 1
            fi
            
            echo "⏳ Waiting for service to be ready (attempt $i/30)"
            sleep 10
          done

      - name: Performance validation
        run: |
          echo "Running performance validation..."
          SERVICE_URL="${{ needs.deploy.outputs.service_url }}"
          
          # Simple performance check
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "${SERVICE_URL}")
          echo "Response time: ${RESPONSE_TIME}s"
          
          # Fail if response time > 5 seconds
          if (( $(echo "${RESPONSE_TIME} > 5.0" | bc -l) )); then
            echo "❌ Performance validation failed: Response time too high"
            exit 1
          fi
          
          echo "✅ Performance validation passed"

      - name: Smoke tests
        run: |
          echo "Running smoke tests..."
          SERVICE_URL="${{ needs.deploy.outputs.service_url }}"
          
          # Add your smoke tests here
          # Example: Test critical endpoints
          curl -f "${SERVICE_URL}/health"
          echo "✅ Smoke tests passed"

  # Create deployment record
  record:
    needs: [setup, deploy, validate-deployment]
    if: always() && needs.setup.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create deployment record
        run: |
          cat > deployment-record.json << EOF
          {
            "id": "${{ needs.deploy.outputs.deployment_id }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ needs.setup.outputs.environment }}",
            "project_id": "${{ needs.setup.outputs.gcp_project }}",
            "region": "${{ env.REGISTRY_REGION }}",
            "image_tag": "${{ needs.build.outputs.image_tag }}",
            "image_url": "${{ needs.build.outputs.image_url }}",
            "service_url": "${{ needs.deploy.outputs.service_url }}",
            "git_sha": "${{ github.sha }}",
            "git_ref": "${{ github.ref }}",
            "git_actor": "${{ github.actor }}",
            "workflow_run_id": "${{ github.run_id }}",
            "deployment_strategy": "${{ needs.setup.outputs.deployment_strategy }}",
            "status": "${{ job.status }}",
            "validation_passed": "${{ needs.validate-deployment.result == 'success' }}"
          }
          EOF
          
          echo "📋 Deployment record created"
          cat deployment-record.json

      - name: Notify deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "🎉 Deployment successful to ${{ needs.setup.outputs.environment }}"
            echo "🔗 Service URL: ${{ needs.deploy.outputs.service_url }}"
          else
            echo "💥 Deployment failed to ${{ needs.setup.outputs.environment }}"
          fi

  # Promote to next environment (optional)
  promote:
    needs: [setup, deploy, validate-deployment]
    if: |
      needs.setup.outputs.environment == 'dev' && 
      needs.validate-deployment.result == 'success' &&
      github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Promote to test environment
        run: |
          echo "🚀 Ready to promote to test environment"
          echo "Run: gh workflow run deploy.yml -f environment=test"