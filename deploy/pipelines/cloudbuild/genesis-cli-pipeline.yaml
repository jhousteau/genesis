# Genesis CLI CI/CD Pipeline
# PIPES Methodology Implementation with Quality Gates and Security Scanning
# Copyright 2025 Google LLC

# Pipeline configuration
timeout: '3600s'
options:
  machineType: 'E2_STANDARD_4'
  diskSizeGb: '100'
  logging: CLOUD_LOGGING_ONLY
  env:
    - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'

# Substitution variables for environment management
substitutions:
  _ENVIRONMENT: 'dev'
  _PROJECT_ID: '${PROJECT_ID}'
  _REGION: 'us-central1'
  _ARTIFACT_REGISTRY: '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/genesis-cli'
  _CLI_VERSION: '${SHORT_SHA}'
  _TERRAFORM_VERSION: '1.6.6'
  _KUBECTL_VERSION: '1.28.0'
  _TRIVY_VERSION: '0.48.3'

# Build steps implementing PIPES methodology
steps:
  # Phase 1: PROVISION - Environment Setup and Validation
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'environment-validation'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== PIPES Phase 1: PROVISION - Environment Validation ==="

        # Validate GCP project and environment isolation
        if [[ -z "$PROJECT_ID" ]]; then
          echo "‚ùå PROJECT_ID not set - environment isolation failed"
          exit 1
        fi

        # Verify required APIs are enabled
        REQUIRED_APIS=(
          "cloudbuild.googleapis.com"
          "artifactregistry.googleapis.com"
          "compute.googleapis.com"
          "container.googleapis.com"
          "secretmanager.googleapis.com"
          "monitoring.googleapis.com"
          "logging.googleapis.com"
        )

        for api in "${REQUIRED_APIS[@]}"; do
          if ! gcloud services list --enabled --filter="name:$api" --format="value(name)" | grep -q "$api"; then
            echo "‚ùå Required API not enabled: $api"
            exit 1
          else
            echo "‚úÖ API enabled: $api"
          fi
        done

        # Validate environment-specific configuration
        if [[ ! -f "config/environments/${_ENVIRONMENT}.env" ]]; then
          echo "‚ùå Environment configuration missing: ${_ENVIRONMENT}.env"
          exit 1
        fi

        echo "‚úÖ Environment validation complete"
    env:
      - 'PROJECT_ID=${_PROJECT_ID}'
      - 'ENVIRONMENT=${_ENVIRONMENT}'

  # Phase 2: CODE QUALITY - Linting and Static Analysis
  - name: 'python:3.11-slim'
    id: 'code-quality-python'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== Code Quality: Python Analysis ==="

        # Install Python linting tools
        pip install --no-cache-dir flake8 black mypy bandit safety pylint

        # Python code formatting check
        echo "üîç Checking Python code formatting with Black..."
        if ! black --check --diff cli/ core/ intelligence/; then
          echo "‚ùå Python code formatting issues detected"
          echo "üí° Run 'black cli/ core/ intelligence/' to fix formatting"
          exit 1
        fi
        echo "‚úÖ Python formatting check passed"

        # Python linting with flake8
        echo "üîç Running Python linting with flake8..."
        if ! flake8 cli/ core/ intelligence/ --max-line-length=100 --ignore=E203,W503; then
          echo "‚ùå Python linting issues detected"
          exit 1
        fi
        echo "‚úÖ Python linting passed"

        # Type checking with mypy
        echo "üîç Running type checking with mypy..."
        if ! mypy cli/ core/ intelligence/ --ignore-missing-imports; then
          echo "‚ùå Python type checking failed"
          exit 1
        fi
        echo "‚úÖ Python type checking passed"

  # Phase 3: SECURITY SCANNING - Code Security Analysis
  - name: 'python:3.11-slim'
    id: 'security-scan-python'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== PIPES PROTECTION: Python Security Scanning ==="

        # Install security scanning tools
        pip install --no-cache-dir bandit safety semgrep

        # Security linting with bandit
        echo "üõ°Ô∏è Running security scan with bandit..."
        if ! bandit -r cli/ core/ intelligence/ -f json -o bandit-report.json; then
          echo "‚ùå Security vulnerabilities detected in Python code"
          cat bandit-report.json
          exit 1
        fi
        echo "‚úÖ Python security scan passed"

        # Dependency vulnerability scan with safety
        echo "üõ°Ô∏è Scanning dependencies for vulnerabilities..."
        if ! safety check --json --output safety-report.json; then
          echo "‚ùå Vulnerable dependencies detected"
          cat safety-report.json
          exit 1
        fi
        echo "‚úÖ Dependency vulnerability scan passed"

  # Phase 4: SECRET SCANNING - Git History and Code
  - name: 'gcr.io/cloud-builders/git'
    id: 'secret-scanning'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== PIPES PROTECTION: Secret Scanning ==="

        # Install gitleaks for secret scanning
        wget -O gitleaks.tar.gz "https://github.com/zricethezav/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz"
        tar -xzf gitleaks.tar.gz
        chmod +x gitleaks

        # Scan for secrets in git history
        echo "üîç Scanning git history for secrets..."
        if ! ./gitleaks detect --source . --verbose --report-format json --report-path gitleaks-report.json; then
          echo "‚ùå Secrets detected in git history"
          cat gitleaks-report.json
          exit 1
        fi
        echo "‚úÖ Secret scanning passed"

  # Phase 5: TERRAFORM VALIDATION - Infrastructure Code Quality
  - name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
    id: 'terraform-validation'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -eu
        echo "=== PIPES PROVISION: Terraform Validation ==="

        # Validate all Terraform modules
        for module_dir in modules/*/; do
          if [ -f "$module_dir/main.tf" ]; then
            echo "üîç Validating Terraform module: $(basename $module_dir)"
            cd "$module_dir"

            # Initialize and validate
            terraform init -backend=false
            terraform validate

            # Format check
            if ! terraform fmt -check -recursive; then
              echo "‚ùå Terraform formatting issues in $module_dir"
              exit 1
            fi

            cd - > /dev/null
            echo "‚úÖ Terraform module validation passed: $(basename $module_dir)"
          fi
        done

        # Validate environment configurations
        for env_dir in environments/*/; do
          if [ -f "$env_dir/main.tf" ]; then
            echo "üîç Validating environment: $(basename $env_dir)"
            cd "$env_dir"

            terraform init -backend=false
            terraform validate

            cd - > /dev/null
            echo "‚úÖ Environment validation passed: $(basename $env_dir)"
          fi
        done

  # Phase 6: CONTAINER BUILD - Genesis CLI Container
  - name: 'gcr.io/cloud-builders/docker'
    id: 'container-build'
    args:
      - 'build'
      - '-t'
      - '${_ARTIFACT_REGISTRY}/genesis-cli:${_CLI_VERSION}'
      - '-t'
      - '${_ARTIFACT_REGISTRY}/genesis-cli:latest'
      - '-f'
      - 'cli/Dockerfile'
      - '.'
    env:
      - 'DOCKER_BUILDKIT=1'

  # Phase 7: CONTAINER SECURITY SCANNING
  - name: 'aquasec/trivy:${_TRIVY_VERSION}'
    id: 'container-security-scan'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -eu
        echo "=== PIPES PROTECTION: Container Security Scanning ==="

        # Scan container image for vulnerabilities
        trivy image \
          --exit-code 1 \
          --severity HIGH,CRITICAL \
          --format json \
          --output trivy-report.json \
          ${_ARTIFACT_REGISTRY}/genesis-cli:${_CLI_VERSION}

        if [ $? -eq 0 ]; then
          echo "‚úÖ Container security scan passed"
        else
          echo "‚ùå Critical vulnerabilities found in container image"
          cat trivy-report.json
          exit 1
        fi

  # Phase 8: UNIT TESTING - Comprehensive Test Suite
  - name: 'python:3.11'
    id: 'unit-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== Quality Gate: Unit Testing ==="

        # Install test dependencies
        pip install --no-cache-dir poetry pytest pytest-cov pytest-mock pytest-asyncio

        # Install project dependencies
        cd intelligence/smart-commit
        poetry install --only=main,test

        # Run comprehensive test suite
        echo "üß™ Running unit tests with coverage..."
        poetry run pytest \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80 \
          --junitxml=junit-report.xml \
          tests/

        if [ $? -eq 0 ]; then
          echo "‚úÖ Unit tests passed with adequate coverage"
        else
          echo "‚ùå Unit tests failed or coverage below threshold"
          exit 1
        fi

  # Phase 9: INTEGRATION TESTING - End-to-End Testing
  - name: 'python:3.11'
    id: 'integration-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== Quality Gate: Integration Testing ==="

        # Install testing dependencies
        pip install --no-cache-dir pytest pytest-asyncio httpx

        # Run integration tests
        echo "üß™ Running integration tests..."
        if ! python -m pytest tests/integration/ -v --tb=short; then
          echo "‚ùå Integration tests failed"
          exit 1
        fi
        echo "‚úÖ Integration tests passed"

  # Phase 10: TERRAFORM SECURITY SCANNING
  - name: 'bridgecrew/checkov:latest'
    id: 'terraform-security-scan'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -eu
        echo "=== PIPES PROTECTION: Terraform Security Scanning ==="

        # Scan Terraform code for security issues
        checkov -d . \
          --framework terraform \
          --output json \
          --output-file checkov-report.json \
          --skip-check CKV2_GCP_18,CKV_GCP_6 || {
          echo "‚ùå Terraform security issues detected"
          cat checkov-report.json
          exit 1
        }
        echo "‚úÖ Terraform security scan passed"

  # Phase 11: CONTAINER REGISTRY PUSH
  - name: 'gcr.io/cloud-builders/docker'
    id: 'container-push'
    args:
      - 'push'
      - '--all-tags'
      - '${_ARTIFACT_REGISTRY}/genesis-cli'

  # Phase 12: INFRASTRUCTURE DEPLOYMENT (Development)
  - name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
    id: 'infrastructure-deploy-dev'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -eu
        echo "=== PIPES INTEGRATION: Infrastructure Deployment ==="

        if [ "${_ENVIRONMENT}" = "dev" ]; then
          echo "üöÄ Deploying to development environment..."

          # Setup Terraform backend
          cd environments/dev

          # Initialize with remote backend
          terraform init \
            -backend-config="bucket=${_PROJECT_ID}-tf-state" \
            -backend-config="prefix=genesis-cli/dev"

          # Plan infrastructure changes
          terraform plan \
            -var="project_id=${_PROJECT_ID}" \
            -var="region=${_REGION}" \
            -var="cli_version=${_CLI_VERSION}" \
            -out=tfplan

          # Apply infrastructure changes
          terraform apply -auto-approve tfplan

          echo "‚úÖ Development infrastructure deployment complete"
        else
          echo "‚ÑπÔ∏è Skipping dev deployment for ${_ENVIRONMENT} environment"
        fi
    env:
      - 'TF_IN_AUTOMATION=true'
      - 'TF_INPUT=false'

  # Phase 13: KUBERNETES DEPLOYMENT
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'kubernetes-deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== PIPES INTEGRATION: Kubernetes Deployment ==="

        # Setup kubectl configuration
        gcloud container clusters get-credentials genesis-cli-${_ENVIRONMENT} \
          --region=${_REGION} \
          --project=${_PROJECT_ID}

        # Deploy Genesis CLI to Kubernetes
        envsubst < deploy/kubernetes/genesis-cli-deployment.yaml | kubectl apply -f -

        # Wait for rollout to complete
        kubectl rollout status deployment/genesis-cli -n genesis-system --timeout=600s

        echo "‚úÖ Kubernetes deployment complete"
    env:
      - 'ENVIRONMENT=${_ENVIRONMENT}'
      - 'PROJECT_ID=${_PROJECT_ID}'
      - 'IMAGE=${_ARTIFACT_REGISTRY}/genesis-cli:${_CLI_VERSION}'

  # Phase 14: SMOKE TESTING - Post-Deployment Validation
  - name: 'curlimages/curl:latest'
    id: 'smoke-tests'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -eu
        echo "=== Quality Gate: Smoke Testing ==="

        # Wait for service to be ready
        sleep 30

        # Get service endpoint
        ENDPOINT=$(kubectl get service genesis-cli -n genesis-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

        if [ -z "$ENDPOINT" ]; then
          ENDPOINT="genesis-cli.genesis-system.svc.cluster.local"
        fi

        # Test health endpoint
        echo "üß™ Testing health endpoint..."
        if ! curl -f -s "http://$ENDPOINT:8080/health"; then
          echo "‚ùå Health check failed"
          exit 1
        fi
        echo "‚úÖ Smoke tests passed"

  # Phase 15: PERFORMANCE TESTING
  - name: 'python:3.11-slim'
    id: 'performance-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== PIPES EVOLUTION: Performance Testing ==="

        # Install performance testing tools
        pip install --no-cache-dir locust requests

        # Run performance tests
        echo "üöÄ Running performance tests..."
        if ! python tests/performance/load_test.py --target-host=http://genesis-cli.genesis-system.svc.cluster.local:8080; then
          echo "‚ùå Performance tests failed"
          exit 1
        fi
        echo "‚úÖ Performance tests passed"

  # Phase 16: SECURITY COMPLIANCE VALIDATION
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'compliance-validation'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== PIPES PROTECTION: Compliance Validation ==="

        # Validate security controls are in place
        echo "üõ°Ô∏è Validating security controls..."

        # Check IAM policies
        gcloud projects get-iam-policy ${_PROJECT_ID} --format=json > iam-policy.json

        # Validate network security
        gcloud compute firewall-rules list --project=${_PROJECT_ID} --format=json > firewall-rules.json

        # Check for proper resource labeling
        gcloud compute instances list --project=${_PROJECT_ID} --format=json > instances.json

        # Generate compliance report
        python scripts/generate-compliance-report.py \
          --iam-policy=iam-policy.json \
          --firewall-rules=firewall-rules.json \
          --instances=instances.json \
          --output=compliance-report.json

        echo "‚úÖ Compliance validation complete"

  # Phase 17: MONITORING SETUP
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'monitoring-setup'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== PIPES EVOLUTION: Monitoring Setup ==="

        # Create monitoring dashboard
        gcloud monitoring dashboards create --config-from-file=monitoring/dashboards/genesis-cli-dashboard.json

        # Setup alerting policies
        for policy in monitoring/alerts/*.yaml; do
          if [ -f "$policy" ]; then
            gcloud alpha monitoring policies create --policy-from-file="$policy"
          fi
        done

        echo "‚úÖ Monitoring setup complete"

  # Phase 18: DOCUMENTATION GENERATION
  - name: 'python:3.11'
    id: 'documentation'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "=== PIPES STANDARDIZATION: Documentation Generation ==="

        # Install documentation tools
        pip install --no-cache-dir mkdocs mkdocs-material mkdocstrings

        # Generate API documentation
        cd cli/
        python -c "
        import json
        import sys
        from commands.main import create_parser

        parser = create_parser()
        help_text = parser.format_help()

        with open('../docs/cli-reference.md', 'w') as f:
            f.write('# Genesis CLI Reference\n\n')
            f.write('```\n')
            f.write(help_text)
            f.write('\n```\n')
        "

        echo "‚úÖ Documentation generation complete"

  # Phase 19: QUALITY GATE SUMMARY
  - name: 'alpine:latest'
    id: 'quality-gate-summary'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -eu
        echo "=== PIPES STANDARDIZATION: Quality Gate Summary ==="
        echo "
        ‚úÖ PIPES Phase 1 - PROVISION: Environment validation passed
        ‚úÖ PIPES Phase 2 - INTEGRATION: Code quality checks passed
        ‚úÖ PIPES Phase 3 - PROTECTION: Security scanning passed
        ‚úÖ PIPES Phase 4 - EVOLUTION: Performance testing passed
        ‚úÖ PIPES Phase 5 - STANDARDIZATION: Documentation generated

        üöÄ Genesis CLI deployment successful!
        üìä Quality gates: All passed
        üõ°Ô∏è Security scans: Clean
        üìà Performance: Within SLA
        üìö Documentation: Generated

        Environment: ${_ENVIRONMENT}
        Version: ${_CLI_VERSION}
        Project: ${_PROJECT_ID}
        Region: ${_REGION}
        "

# Artifacts to store for analysis and debugging
artifacts:
  objects:
    location: 'gs://${_PROJECT_ID}-build-artifacts/genesis-cli/${_CLI_VERSION}'
    paths:
      - 'bandit-report.json'
      - 'safety-report.json'
      - 'gitleaks-report.json'
      - 'trivy-report.json'
      - 'checkov-report.json'
      - 'junit-report.xml'
      - 'compliance-report.json'
      - 'coverage.xml'

# Available logs for debugging
availableSecrets:
  secretManager:
    - versionName: projects/${_PROJECT_ID}/secrets/github-token/versions/latest
      env: 'GITHUB_TOKEN'

# Build tags for organization
tags:
  - 'genesis-cli'
  - 'pipes-methodology'
  - 'quality-gates'
  - 'security-scanning'
