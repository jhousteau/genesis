#!/usr/bin/env python3
"""
Integration Demo - Demonstrates the complete system integration
Shows how all 8 components work together through unified interfaces
"""

import argparse
import json
import os
import sys
import time
from datetime import datetime
from pathlib import Path

# Add the lib directory to Python path
sys.path.insert(0, str(Path(__file__).parent.parent / "lib"))

from integration import (CheckType, ComponentType, EventPriority, EventType,
                         HealthCheck, add_health_check, get_config,
                         get_integration_status, get_system_health,
                         get_system_integrator, publish_event,
                         register_component, set_config)


def demo_component_registry():
    """Demonstrate component registry functionality"""
    print("üîß Component Registry Demo")
    print("-" * 40)
    
    # Register various components
    components = [
        ("CLI Interface", ComponentType.CLI),
        ("Project Monitor", ComponentType.MONITORING),
        ("AI Optimizer", ComponentType.INTELLIGENCE),
        ("Deploy Engine", ComponentType.DEPLOYMENT),
        ("GCP Isolation", ComponentType.ISOLATION),
        ("Terraform Manager", ComponentType.INFRASTRUCTURE),
        ("Policy Engine", ComponentType.GOVERNANCE),
        ("Setup Wizard", ComponentType.SETUP)
    ]
    
    component_ids = []
    for name, comp_type in components:
        component_id = register_component(
            name=name.lower().replace(" ", "_"),
            component_type=comp_type,
            version="1.0.0",
            description=f"Demo {name}",
            capabilities=[f"{name.lower()}_operations"],
            dependencies=[]
        )
        component_ids.append((name, component_id))
        print(f"  ‚úÖ Registered: {name} (ID: {component_id[:8]}...)")
    
    return component_ids


def demo_event_bus(component_ids):
    """Demonstrate event bus communication"""
    print("\nüì° Event Bus Demo")
    print("-" * 40)
    
    events_received = []
    
    def event_listener(event):
        events_received.append(event)
        print(f"  üì® Received: {event.type} from {event.source}")
    
    # Subscribe to all events
    from integration import get_event_bus
    event_bus = get_event_bus()
    sub_id = event_bus.subscribe(
        pattern="*",
        callback=event_listener,
        subscriber_id="demo_listener"
    )
    
    # Publish various events
    events_to_publish = [
        (EventType.COMPONENT_STARTED, {"component": "cli_interface"}, "system"),
        (EventType.DEPLOY_STARTED, {"project": "demo_project", "env": "dev"}, "deploy_engine"),
        (EventType.CONFIG_CHANGED, {"key": "demo.setting", "value": "new_value"}, "config_manager"),
        (EventType.ALERT_TRIGGERED, {"level": "warning", "message": "Demo alert"}, "monitor"),
        ("intelligence.optimization", {"suggestion": "Use smaller instances"}, "ai_optimizer"),
    ]
    
    for event_type, data, source in events_to_publish:
        event_id = publish_event(
            event_type=event_type,
            data=data,
            source=source,
            priority=EventPriority.NORMAL
        )
        print(f"  üì§ Published: {event_type} (ID: {event_id[:8]}...)")
    
    # Wait for events to be processed
    time.sleep(1)
    
    # Cleanup
    event_bus.unsubscribe(sub_id)
    
    print(f"  üìä Total events received: {len(events_received)}")
    return len(events_received)


def demo_configuration():
    """Demonstrate unified configuration management"""
    print("\n‚öôÔ∏è  Configuration Manager Demo")
    print("-" * 40)
    
    # Set various configurations
    configurations = [
        ("global.platform.name", "Universal Project Platform"),
        ("global.platform.version", "2.0.0"),
        ("components.cli.enabled", True),
        ("components.monitoring.interval", 30),
        ("components.intelligence.auto_fix", True),
        ("deployment.strategies.default", "blue-green"),
        ("isolation.gcp.project_prefix", "whitehorse"),
        ("governance.compliance.required", ["SOC2", "GDPR"]),
    ]
    
    for key, value in configurations:
        set_config(key, value)
        retrieved = get_config(key)
        status = "‚úÖ" if retrieved == value else "‚ùå"
        print(f"  {status} {key}: {value}")
    
    # Demonstrate configuration hierarchy
    print("\n  üìä Configuration Summary:")
    from integration import get_config_manager
    config_manager = get_config_manager()
    
    global_config = config_manager.get_all("global")
    components_config = config_manager.get_all("components")
    
    print(f"    - Global settings: {len(global_config)} keys")
    print(f"    - Component settings: {len(components_config)} keys")
    
    return len(configurations)


def demo_health_monitoring():
    """Demonstrate health monitoring and aggregation"""
    print("\nüè• Health Monitoring Demo")
    print("-" * 40)
    
    # Add various health checks
    health_checks = [
        HealthCheck(
            name="cli_responsive",
            component="cli_interface",
            check_type=CheckType.READINESS,
            function=lambda: True,  # Always healthy for demo
            critical=True
        ),
        HealthCheck(
            name="deployment_ready",
            component="deploy_engine",
            check_type=CheckType.READINESS,
            function=lambda: time.time() % 10 > 3,  # Intermittent for demo
            critical=True
        ),
        HealthCheck(
            name="monitoring_active",
            component="project_monitor",
            check_type=CheckType.LIVENESS,
            function=lambda: True,  # Always healthy
            critical=False
        ),
        HealthCheck(
            name="intelligence_learning",
            component="ai_optimizer",
            check_type=CheckType.CUSTOM,
            function=lambda: time.time() % 20 > 5,  # Mostly healthy
            critical=False
        )
    ]
    
    for check in health_checks:
        add_health_check(check)
        print(f"  ‚úÖ Added health check: {check.name} ({check.component})")
    
    # Start monitoring and let it run
    from integration import get_health_aggregator
    health_aggregator = get_health_aggregator()
    health_aggregator.start_monitoring()
    
    print("\n  üîç Running health checks...")
    time.sleep(3)  # Let checks run
    
    # Get system health
    system_health = get_system_health()
    print(f"\n  üìä System Health Summary:")
    print(f"    - Status: {system_health.status.value}")
    print(f"    - Score: {system_health.score:.1%}")
    print(f"    - Healthy Components: {system_health.healthy_components}/{system_health.total_components}")
    
    if system_health.warnings:
        print(f"    - Warnings: {len(system_health.warnings)}")
        for warning in system_health.warnings[:3]:  # Show first 3
            print(f"      ‚Ä¢ {warning}")
    
    if system_health.critical_issues:
        print(f"    - Critical Issues: {len(system_health.critical_issues)}")
        for issue in system_health.critical_issues[:3]:  # Show first 3
            print(f"      ‚Ä¢ {issue}")
    
    health_aggregator.stop_monitoring()
    
    return system_health.score


def demo_cross_component_integration():
    """Demonstrate cross-component integration and workflows"""
    print("\nüîó Cross-Component Integration Demo")
    print("-" * 40)
    
    integrator = get_system_integrator()
    
    # Simulate a complete project lifecycle
    print("  üöÄ Simulating project lifecycle...")
    
    # 1. Project creation (Setup + Infrastructure)
    print("    1. Creating new project...")
    project_config = {
        'name': 'demo-microservice',
        'type': 'cloud-run',
        'language': 'python',
        'environment': 'dev'
    }
    
    publish_event(
        event_type="project.created",
        data=project_config,
        source="setup_wizard"
    )
    
    # 2. Infrastructure provisioning (Infrastructure + Isolation)
    print("    2. Provisioning infrastructure...")
    publish_event(
        event_type=EventType.DEPLOY_STARTED,
        data={'project': 'demo-microservice', 'stage': 'infrastructure'},
        source="terraform_manager"
    )
    
    # 3. Deployment (Deployment + Monitoring)
    print("    3. Deploying application...")
    publish_event(
        event_type=EventType.DEPLOY_COMPLETED,
        data={'project': 'demo-microservice', 'version': 'v1.0.0'},
        source="deploy_engine"
    )
    
    # 4. Governance check (Governance)
    print("    4. Running governance checks...")
    publish_event(
        event_type="governance.scan",
        data={'project': 'demo-microservice', 'compliance': ['SOC2', 'GDPR']},
        source="policy_engine"
    )
    
    # 5. AI optimization (Intelligence)
    print("    5. Analyzing for optimizations...")
    publish_event(
        event_type="intelligence.analysis",
        data={'project': 'demo-microservice', 'metrics': {'cost': 45.2, 'performance': 0.85}},
        source="ai_optimizer"
    )
    
    # Wait for all events to be processed
    time.sleep(1)
    
    # Get final integration status
    status = get_integration_status()
    
    print(f"\n  üìä Integration Status:")
    print(f"    - System Health: {status['overall_health']}")
    print(f"    - Health Score: {status['health_score']:.1%}")
    print(f"    - Registered Components: {status['registry']['total_components']}")
    print(f"    - Events Published: {status['event_bus']['events_published']}")
    print(f"    - Configuration Keys: {status['configuration']['total_keys']}")
    print(f"    - Health Checks: {status['health_monitoring']['total_checks']}")
    
    return status


def main():
    """Main demo entry point"""
    parser = argparse.ArgumentParser(description="Universal Platform Integration Demo")
    parser.add_argument("--component", choices=[
        "registry", "events", "config", "health", "integration", "all"
    ], default="all", help="Which component to demo")
    parser.add_argument("--quiet", action="store_true", help="Minimal output")
    
    args = parser.parse_args()
    
    if not args.quiet:
        print("üèõÔ∏è  Universal Project Platform Integration Demo")
        print("=" * 60)
        print(f"Started: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
    
    # Initialize the system integrator
    integrator = get_system_integrator()
    if not args.quiet:
        print("‚úÖ System integrator initialized")
    
    component_ids = []
    events_count = 0
    configs_count = 0
    health_score = 0.0
    integration_status = {}
    
    try:
        if args.component in ["registry", "all"]:
            component_ids = demo_component_registry()
        
        if args.component in ["events", "all"]:
            events_count = demo_event_bus(component_ids)
        
        if args.component in ["config", "all"]:
            configs_count = demo_configuration()
        
        if args.component in ["health", "all"]:
            health_score = demo_health_monitoring()
        
        if args.component in ["integration", "all"]:
            integration_status = demo_cross_component_integration()
        
        if not args.quiet:
            print(f"\nüéâ Demo completed successfully!")
            print(f"   - Components registered: {len(component_ids)}")
            print(f"   - Events processed: {events_count}")
            print(f"   - Configurations set: {configs_count}")
            print(f"   - Final health score: {health_score:.1%}")
            
            if integration_status:
                print(f"   - System is {integration_status['overall_health']}")
    
    except Exception as e:
        print(f"\n‚ùå Demo failed: {e}")
        sys.exit(1)
    
    if not args.quiet:
        print("\n" + "=" * 60)
        print("Demo completed. The Universal Platform is ready! üöÄ")
        print("=" * 60)


if __name__ == "__main__":
    main()